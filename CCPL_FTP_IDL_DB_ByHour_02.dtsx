<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/30/2016 2:05:17 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="TDSDEV01"
  DTS:CreatorName="TDSDEV01\Tim"
  DTS:DTSID="{F159D44E-1FCE-4BB6-80E6-6D07573B8754}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="1033"
  DTS:ObjectName="CCPL_FTP_IDL_DB_ByHour_02"
  DTS:PackageType="5"
  DTS:VersionBuild="325"
  DTS:VersionGUID="{92E6EC3B-2DA5-4154-9949-A54648334830}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CCPL]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{00AE86E9-F1DF-4CC0-BF03-CC4441627CBC}"
      DTS:ObjectName="CCPL">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[$Package::CCPL_ConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CCPL_SD01\CCPL_DEV;Initial Catalog=CCPL;Integrated Security=True;Application Name=SSIS-CCPL_FTP_IDL_Demo-{B0E998D0-8253-42CD-823A-DC34DE7DF30C}CCPL_SD01\CCPL_DEV.CCPL;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP_CCPL]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{2D71F943-CD6B-4BDB-943C-CDD9D78D3964}"
      DTS:ObjectName="SMTP_CCPL">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[$Package::SMTP_CCPL_ConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=mail.creativeclippingpath.com;UseWindowsAuthentication=False;EnableSsl=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{4EB52EF9-70BE-4DD2-9190-2D294935B6F9}"
      DTS:ObjectName="CCPL_ConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Data Source=CCPL_SD01\CCPL_DEV;Initial Catalog=CCPL;Integrated Security=True;Application Name=SSIS-CCPL_FTP_IDL_Demo-{B0E998D0-8253-42CD-823A-DC34DE7DF30C}CCPL_SD01\CCPL_DEV.CCPL;</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{4162BD56-8733-4A7A-BF33-F760B81DAEF6}"
      DTS:ObjectName="GetAllCustomersfromDB_SqlStatementSource">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">SELECT Cust_Code, Cust_ShortCode, InputFolder ,FTPAddress,FTPLogin,FTPPassword  FROM  IES_Customers  WHERE Cust_Code IN ('C_00003','C_00006')</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:Description="If true then the package will run for the cusrrent date else mentioned date in pProcessDate"
      DTS:DTSID="{8691DEF3-4292-44ED-8061-EB4B679EF7B4}"
      DTS:ObjectName="pCurDate">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">-1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:Description="Will dynamically set the time  if the value is true "
      DTS:DTSID="{4F8B7E66-E17B-4CA9-A2BA-66545F74C78D}"
      DTS:ObjectName="pCurHour">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">-1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{EAB66B4D-7D1C-47C2-9F10-1EA459184C8F}"
      DTS:ObjectName="pDownloadDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">E:\Projects\FTP_Image_RnD\FTPDownload\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:DTSID="{6294C61A-0C27-4034-9329-BEC1AFF2B4A8}"
      DTS:ObjectName="pFTPFlag">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="The name of the remote SFTP server."
      DTS:DTSID="{BDA12E39-1AF7-430B-B505-1466E1ADE7D2}"
      DTS:ObjectName="pHostName"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">192.168.13.213</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="Password for the FTP/SFTP login"
      DTS:DTSID="{86B403A1-6623-4FAC-8922-C2CDBE4E3059}"
      DTS:ObjectName="pPassword"
      DTS:Required="True"
      DTS:Sensitive="True">
      <DTS:Property
        DTS:Name="ParameterValue">
        <DTS:Property
          DTS:DataType="8"
          DTS:Name="ParameterValue"
          Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAxqrTZKLPiUG4mrn9IUi28QAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAAAEFdkFo2uegvvRizoVkLa5BZ2mCTN7tuBe7m54xI812QAAAAAOgAAAAAIAACAAAADlhDO5QoTeZImTHf2ulQ1UqAFjnu4HBq2qbsMhrgXRNTAAAACFAz5Iel6bwB5Ijq3gB5TlAca9xgoP2qOp3eI4+oXDXH/iNUMcrDbXNQXQzN41G3FAAAAAFlDAJ4DI+4CST8qrh49CvbxDBfCWIcZtfLB1WVwHCGgob1rT3P/LmeHaEt8ntCZQr9OofajGnovcH+B0s42BwA</DTS:Property>
      </DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{3100F797-0754-4A82-9CA5-2F338369B760}"
      DTS:ObjectName="pPort">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">21</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="7"
      DTS:DTSID="{ED5CF30E-F506-4CB9-92FE-9B049194BC1A}"
      DTS:ObjectName="pProcessDate">
      <DTS:Property
        DTS:DataType="7"
        DTS:Name="ParameterValue">2/26/2020 6:40:00 PM</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{8B8F2ABD-4B39-461E-8C66-D4B0179F8860}"
      DTS:ObjectName="pProcessHour">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">22</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:Description="This value will be used in gathering the files for the sepcified minutes earlier"
      DTS:DTSID="{71312BCD-BFFD-429F-B4D9-B13E51271D2A}"
      DTS:ObjectName="pProcessingMinutes">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">960</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="Remote path on the SFTP server (in the format of /folder1/folder2)"
      DTS:DTSID="{750A9FA2-052E-4E48-9FD0-13CF972CCB19}"
      DTS:ObjectName="pRemotePath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">/public_html/ccplftp.com/flora/Input</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="User name for the SFTP login"
      DTS:DTSID="{C7671118-509B-47AB-A1BE-2041DFDC7CD3}"
      DTS:ObjectName="pUserName"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">creative</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="The full local path to the WinSCP executable (winscp.exe)"
      DTS:DTSID="{505EC7A5-3490-4E75-BA45-C45738084ECA}"
      DTS:ObjectName="pWinScpExecutablePath"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">C:\Program Files (x86)\WinSCP\WinSCP.exe</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:DTSID="{BA491D7F-46CA-4FCE-B8A7-E7EE2DDBF459}"
      DTS:ObjectName="pwinSCPLog">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">-1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{3364CF8F-7F37-43AC-9A5E-B2A6B3F8BFE4}"
      DTS:ObjectName="pwinSCPLogPath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">E:\Projects\CCPL\IES\Source\IDL\CCPL_FTP_DL</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{E65A8968-259E-4C82-AD93-DDE70BCB3849}"
      DTS:ObjectName="SMTP_CCPL_ConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">SmtpServer=mail.creativeclippingpath.com;UseWindowsAuthentication=False;EnableSsl=False;</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E05A7AF2-09B8-49F7-A2AF-DAF0499292CD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustEmail">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{90D37CFD-BD87-4DC6-BA7F-8AD9FBF8A20E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustFTP">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3ABAF360-843D-4016-B4DF-DC148ABD46C1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustFTPPWD">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E2784068-A174-4839-891B-BA402B732614}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustFTPUser">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{169B652F-2F60-4E0B-9178-8F3B092E3EB1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustInputFolder">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8F692F01-E833-46FC-811C-36A3C228FE1C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustomerID">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0C4836ED-E38D-4C6C-A868-244F563568F5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CustomerLists">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{ED426A85-D8AF-4E12-AC2A-5010DD3118C9}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustSC">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{557D92A9-4DF8-4692-801F-15FE33ADF536}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailBody">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3C134E65-2755-4E95-9F1B-EF528E18D556}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="fromProcess_date">
      <DTS:VariableValue
        DTS:DataType="7">2/4/2020 5:02:13 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{66E4D5B6-F9DC-4A28-871C-3E64A452E823}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Package::pCurDate] == TRUE? GETDATE(): @[$Package::pProcessDate]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessDT">
      <DTS:VariableValue
        DTS:DataType="7">2/29/2020 1:23:32 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{78876E8D-9042-4D36-9962-BC95F58AC806}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="toProcess_date">
      <DTS:VariableValue
        DTS:DataType="7">2/4/2020 5:02:33 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0534752C-A8EC-4BA5-90E1-4B430EAA5001}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFolderLists">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A9317B78-202D-408C-9201-69FC85A1D99D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFoldersListsforDL">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AEC595E7-603D-4146-870A-4916243C5E51}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vProcessTime">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\GetAllCustomersfromDB"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{BF2B78F0-D7A5-4191-B17C-146C3A98CC40}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="GetAllCustomersfromDB"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">@[$Package::GetAllCustomersfromDB_SqlStatementSource]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{00AE86E9-F1DF-4CC0-BF03-CC4441627CBC}"
          SQLTask:SqlStatementSource="SELECT Cust_Code, Cust_ShortCode, InputFolder ,FTPAddress,FTPLogin,FTPPassword  FROM  IES_Customers  WHERE Cust_Code IN ('C_00003','C_00006')"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::CustomerLists" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::GetAllCustomersfromDB_SqlStatementSource"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="16"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoopAllCustomers"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{C7ACE55B-99EF-4779-B580-0BB56E67AEFB}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoopAllCustomers">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{EA25EC62-9C43-4B9F-B22E-B8E6FB79B6F8}"
        DTS:ObjectName="{E5167D82-71E7-463E-82E6-81C8E05C1989}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::CustomerLists" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{FB94CE97-D142-43F4-BDE9-83903C95B138}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="DownloadAllFilesByCustomerToLocalServer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_9576024800b94840b9f3f9c229c168ea"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CustFTP,User::CustFTPPWD,User::CustFTPUser,User::CustInputFolder,User::fromProcess_date,User::ProcessDT,User::toProcess_date,User::vFoldersListsforDL,$Package::pCurHour,$Package::pFTPFlag,$Package::pHostName,$Package::pPassword,$Package::pPort,$Package::pProcessDate,$Package::pProcessHour,$Package::pProcessingMinutes,$Package::pRemotePath,$Package::pUserName,$Package::pWinScpExecutablePath,$Package::pwinSCPLog,$Package::pwinSCPLogPath">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_9576024800b94840b9f3f9c229c168ea.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{722547D9-BC39-411E-B392-3AF4BFB5598D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9576024800b94840b9f3f9c229c168ea</RootNamespace>
    <AssemblyName>ST_9576024800b94840b9f3f9c229c168ea</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
#endregion

namespace ST_9576024800b94840b9f3f9c229c168ea
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        public Protocol ptcl { get; private set; }

        public void Main()
		{
            // TODO: Add your code here

            //String remoteFTPDirectory = Dts.Variables["$Package::pRemotePath"].Value.ToString();
            String winscpPath = Dts.Variables["$Package::pWinScpExecutablePath"].Value.ToString();
            ////String ftpSite = (string)Dts.Variables["$Package::pHostName"].Value.ToString();
            ////String username = (string)Dts.Variables["$Package::pUserName"].GetSensitiveValue();
            ////String password = (string)Dts.Variables["$Package::pPassword"].GetSensitiveValue();
            String ftpSite = (string)Dts.Variables["CustFTP"].Value.ToString();
            String username = (string)Dts.Variables["CustFTPUser"].Value.ToString();
            String password = (string)Dts.Variables["CustFTPPWD"].Value.ToString();
            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::pPort"].Value.ToString());
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::pwinSCPLog"].Value);
            String winSCPLogPath = Dts.Variables["$Package::pwinSCPLogPath"].Value.ToString();          
            String CustInputFolder = Dts.Variables["CustInputFolder"].Value.ToString();
            String DownloadDirectoryRP;
            String remoteFTPDirectory;

            DateTime pProcessDate = Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Date;
            DateTime fromProcess_date = pProcessDate;
            DateTime toProcess_date = pProcessDate;


            fromProcess_date = Convert.ToDateTime(Dts.Variables["fromProcess_date"].Value.ToString());
            toProcess_date = Convert.ToDateTime(Dts.Variables["toProcess_date"].Value.ToString()); 

            //MessageBox.Show("from time-" + fromProcess_date.ToString() + "to time-"+ toProcess_date.ToString());


            TransferOptions transferOptions = new TransferOptions();

            Boolean sFTP = Convert.ToBoolean(Dts.Variables["$Package::pFTPFlag"].Value);
            if (sFTP)
            {
                ptcl = Protocol.Sftp;
            }
            else
            {
                ptcl = Protocol.Ftp;
            }
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();

            TimeSpan span = new TimeSpan(0, 0, 1, 0, 0);

            // Setup session options
            SessionOptions sessionOptions = new SessionOptions
            {
                FtpMode = FtpMode.Passive,
                Protocol = ptcl,       // Can be SFTP, FTPS, or plain FTP
                HostName = ftpSite,
                UserName = username,
                Password = password,
                //GiveUpSecurityAndAcceptAnySshHostKey = true
            };

            sessionOptions.AddRawSettings("FtpPingInterval", "60");


            ////// Set up the FTP session, specifying the path to the server directory
            try
            {
                DataTable dtFolders = (DataTable)Dts.Variables["User::vFoldersListsforDL"].Value;

                using (Session session = new Session())
                {
                    // WinSCP .NET assembly must be in GAC to be used with SSIS,
                    // set path to WinSCP.exe explicitly, if using non-default path.
                    session.ExecutablePath = winscpPath;


                    if (winSCPLog)
                    {
                        session.SessionLogPath = @winSCPLogPath + @"WinscpSessionLogDL.txt";
                        session.DebugLogPath = @winSCPLogPath + @"WinscpDebugLogDL.txt";
                    }

                    // Connect
                    //session.Timeout = new TimeSpan(0, 2, 0); // two minutes
                    session.Timeout = span;
                    session.Open(sessionOptions);

                    //////-------------------------Download Files from the Path scpecified in the Object Lists      

                    //transferOptions.TransferMode = TransferMode.Binary;

                    if (dtFolders.Rows.Count > 0)
                    {
                        foreach (DataRow row in dtFolders.Rows)
                        {

                            DownloadDirectoryRP = row["LocalDirPath"].ToString();
                            remoteFTPDirectory = row["FolderName"].ToString();

                            // Create local subdirectory, if it does not exist yet
                            if (!Directory.Exists(DownloadDirectoryRP))
                            {
                                Directory.CreateDirectory(DownloadDirectoryRP);
                            }

                            //MessageBox.Show(remoteFTPDirectory + " to " + DownloadDirectoryRP);

                            ////-----------------------Latest Files
                            
                            //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.txt", EnumerationOptions.None).Where(file => !file.IsDirectory).OrderByDescending(file => file.LastWriteTime);// Take(10);

                            //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile=>sfile.LastWriteTime.Date ==DateTime.Today.Date & sfile.LastWriteTime.Hour== DateTime.Today.Hour);// Take(10);

                            //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile =>Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date );

                            IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile => Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date & Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) <= toProcess_date).OrderByDescending(file => file.LastWriteTime);

                            string destPath = Path.Combine(DownloadDirectoryRP, "*");

                            foreach (RemoteFileInfo file in files)
                            {

                                //MessageBox.Show(file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss"));
                                session.GetFiles(RemotePath.EscapeFileMask(file.FullName), destPath).Check();
                            }

                            ////-------------------End Latest Files

                        }
                    }

                    session.Dispose();
                }
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
            }         


            Dts.TaskResult = (int)ScriptResults.Success;

		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_9576024800b94840b9f3f9c229c168ea</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_9576024800b94840b9f3f9c229c168ea</msb:DisplayName>
    <msb:ProjectId>{41EB3A70-6E48-4F09-9077-4E6C3BB54C2F}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_9576024800b94840b9f3f9c229c168ea.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Settings.get_Default():ST_9576024800b94840b9f3f9c229c168ea.Properties.Sett" +
    "ings")]

namespace ST_9576024800b94840b9f3f9c229c168ea.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9576024800b94840b9f3f9c229c168ea")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_9576024800b94840b9f3f9c229c168ea")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9576024800b94840b9f3f9c229c168ea.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_9576024800b94840b9f3f9c229c168ea.dll">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
AAAKKq5+AgAABC0ect0CAHDQAwAAAihFAAAKb0YAAApzRwAACoACAAAEfgIAAAQqGn4DAAAEKh4C
gAMAAAQqGn4EAAAEKh4CKEgAAAoqLnMKAAAGgAQAAAQqAAATMAMASAAAAAIAABEDb0kAAAoKEgBy
TwMAcChKAAAKKBcAAAoCewgAAAQoSwAACgNvSQAACgoSAHJPAwBwKEoAAAooFwAACgJ7CQAABChM
AAAKXyoucw8AAAaACwAABCoqA29NAAAKFv4BKh4Db0kAAAoqAEJTSkIBAAEAAAAAAAwAAAB2NC4w
LjMwMzE5AAAAAAUAbAAAAPwGAAAjfgAAaAcAAKAJAAAjU3RyaW5ncwAAAAAIEQAAeAMAACNVUwCA
FAAAEAAAACNHVUlEAAAAkBQAAPwCAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEA
AAA7AAAABwAAAA0AAAARAAAABQAAAE0AAAACAAAAFQAAAAIAAAADAAAABAAAAAYAAAAEAAAAAQAA
AAcAAAABAAAAAwAAAAIAAAAAAAAGAQAAAAAABgAMBHoHBgCbBHoHBgBYA2cHDwDuBwAABgCFA6sG
BgDvA6sGBgDQA6sGBgCCBKsGBgAsBKsGBgBFBKsGBgCcA6sGBgC3A9sECgBgBHQFCgB3AnQFBgAg
A3oHDgAsBqsABgDtAT4GBgBgBj4GDgB6CKsAEgBwAf0ADgB5BqsABgBAB2cIBgCFAD4GDgDZBqsA
BgBhABYBBgCOAT4GBgDPBj4GBgBFBj4GBgDzCD4GBgA7A2cHBgASB5oHBgDoBpYGFgALA+oFFgBs
A+oFFgCuAoEGCgDYBXQFGgAwCAgCGgB6AQgCBgBNCT4GDgCcCKsADgBoAasABgD3BD4GEgC9Bv0A
EgCTAv0AEgBqCf0ABgCVCaEABgD0BqEABgA+ABYBDgCJCKsAHgCDAQIHHgBMAAIHBgA7BaEADgAR
BasADgAfCasADgDGAqsACgAiB3QFBgAwAj4GBgCaAT4GBgB2CasGAAAAAJgAAAAAAAEAAQABABAA
bgbZADkAAQABAAAAEAChB/0HdQACAAUAAAEQAF4I/QeNAAQACQADAQAAvAgAAHEABQAMAAMBEAAX
AAAAdQAIAAwAAyEQABIBAAB1AAsADgABADEBwwERAEoGxwERAGcCywERAFQB0AEGBtEA1AFWgKwI
1wFWgEcC1wEGAOsC2wEGAPwC2wEGACwA3wE2AJQA6AEWAAEA3wEWAG8A7AFQIAAAAACGCMYF9gEB
AFggAAAAAIEIzwWLAAEAZCAAAAAAhgB0BgYAAgAUJQAAAACGGFoHBgACABwlAAAAAIMYWgcGAAIA
JCUAAAAAkwgOB/sBAgBQJQAAAACTCE8CAAICAFclAAAAAJMIWwIGAgIAXyUAAAAAlggECQ0CAwBm
JQAAAACGGFoHBgADAG4lAAAAAJEYYAcSAgMAHCUAAAAAhhhaBwYAAwB8JQAAAACDADMAFgIDANAl
AAAAAJEYYAcSAgQAHCUAAAAAhhhaBwYABADcJQAAAACDAAoAFgIEAOclAAAAAIMAeAAcAgUAAAAB
AMMEAAABAMMEAAABAL4BAAABAL8BAAABAL8BCQBaBwEAEQBaBwYAGQBaBwoAKQBaBxAAMQBaBxAA
OQBaBxAAQQBaBxAASQBaBxAAUQBaBxAAWQBaBxAAYQBaBxAAaQBaBwYAeQBaBwYA8QBaBwYAEQFa
BxUAcQC0CEsAIQEsCFEAKQE1BlcAMQG5BF4A6QD1BGIAOQGMAGYAOQFWBmsAOQHrAXAAiQDiAnYA
QQFaBwYAkQBaB3sAmQBaBwYAmQBkAYQAmQAoBosAmQDeARAAmQDRARAAmQBHARAAmQBYCJEAqQBa
BwYAqQD+BBAAUQHlCJcAqQAtBRAAqQAcBRAAqQBVCZ0AqQBpBqMAoQDcCKkAYQFDCa8AYQFMB7MA
sQA3CV4AaQE1BrgAcQHVCL0AcQF/CcIAqQA6CMkADABaB+AAkQE1AuYAFABaB+AAkQHJBA0BoQEo
ApcAHABMBzYBJAA3CUYBwQDEAWIAqQFGBUsBqQBPCFABuQFABQYAsQBhCVwB0QDaAgYAqQDaAgYA
IQHKCGABUQHsCGYBwQE2B2wBIQEQCQEAcQBaBwYA6QBaBwYAyQGsAXUByQFyCX4B+QBaB4QBGQFa
BwYAwQD2AXYAiQD1BJEBiQCdBZYBiQCzBZYBwQCPCVwBCAAYALkBCAAcAL4BIABrAL4BIQBrAL4B
LgALADgCLgATAEECLgAbAGACLgAjAGkCLgArAJICLgAzAJICLgA7AJICLgBDAGkCLgBLAJgCLgBT
AJICLgBbAK8CQABrAL4BQwBjAL4BSQB7AGACYwBzAL4BaQB7AGACgQBrAL4BwwBrAL4B4wBrAL4B
HACMAQIAAQADAAIABAAEAAAA0wUjAgAAEgcoAgAAbwItAgAACAkzAgIAAQADAAEAAgADAAIABgAF
AAIABwAHAAEACAAHAAIACQAJANgABAEuAT8BBIAAAAEAAADEHMxdAAAAAAAA2QAAAAQAAAAAAAAA
AAAAAJ4BCQEAAAAADgAAAAAAAAAAAAAApwFVBQAAAAABAAYABQBXJwAAAACwAfoIAAAAAAQAAAAA
AAAAAAAAAJ4B/QAAAAAABAAAAAAAAAAAAAAAngE+BgAAAAAOAAAAAAAAAAAAAACnAbIAAAAAAAQA
AAAAAAAAAAAAAJ4BOwIAAAAAAAAAAAEAAACrBwAABQACAAYAAgAHAAIAZQD/AGkAJwEAAAA8Pjlf
XzRfMAA8TWFpbj5iX180XzAAPD5jX19EaXNwbGF5Q2xhc3M0XzAAPD45X18xADxNYWluPmJfXzEA
SUVudW1lcmFibGVgMQBJT3JkZXJlZEVudW1lcmFibGVgMQBJRW51bWVyYXRvcmAxADw+OV9fNF8y
ADxNYWluPmJfXzRfMgBGdW5jYDIAVG9JbnQxNgA8PjkAPE1vZHVsZT4AU3lzdGVtLklPAFdpblND
UABNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTVF85NTc2MDI0ODAwYjk0
ODQwYjlmM2Y5YzIyOWMxNjhlYQBTeXN0ZW0uRGF0YQBtc2NvcmxpYgA8PmMAU3lzdGVtLkNvbGxl
Y3Rpb25zLkdlbmVyaWMAPHB0Y2w+a19fQmFja2luZ0ZpZWxkAHNldF9QYXNzd29yZABkZWZhdWx0
SW5zdGFuY2UAc2V0X0Z0cE1vZGUARGF0YVRhYmxlAFZhcmlhYmxlAEVudW1lcmFibGUASURpc3Bv
c2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAc2ZpbGUAZ2V0X0Z1bGxO
YW1lAHNldF9Vc2VyTmFtZQBzZXRfSG9zdE5hbWUAVG9EYXRlVGltZQBnZXRfTGFzdFdyaXRlVGlt
ZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAENvbWJpbmUAVHlwZQBXaGVyZQBTeXN0
ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UAT3BlcmF0aW9uUmVzdWx0QmFzZQBEaXNwb3NlAGdldF9EYXRl
AGZyb21Qcm9jZXNzX2RhdGUAdG9Qcm9jZXNzX2RhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29t
cGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1
Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0
ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJp
YnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRB
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBPcmRlckJ5RGVzY2VuZGluZwBTeXN0ZW0uUnVudGltZS5W
ZXJzaW9uaW5nAFRvU3RyaW5nAHNldF9FeGVjdXRhYmxlUGF0aABSZW1vdGVQYXRoAHNldF9EZWJ1
Z0xvZ1BhdGgAc2V0X1Nlc3Npb25Mb2dQYXRoAENoZWNrAEVzY2FwZUZpbGVNYXNrAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3Jp
cHRUYXNrAG9wX0dyZWF0ZXJUaGFuT3JFcXVhbABvcF9MZXNzVGhhbk9yRXF1YWwAZ2V0X3B0Y2wA
c2V0X3B0Y2wAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzk1NzYw
MjQ4MDBiOTQ4NDBiOWYzZjljMjI5YzE2OGVhLmRsbABzZXRfUHJvdG9jb2wAZ2V0X0l0ZW0AU3lz
dGVtAEVudW0AcmVzb3VyY2VNYW4AVG9Cb29sZWFuAFRpbWVTcGFuAE9wZW4AU2NyaXB0TWFpbgBT
ZXNzaW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5S
ZWZsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAEV4Y2VwdGlvbgBSZW1vdGVGaWxlSW5mbwBDdWx0
dXJlSW5mbwBEaXJlY3RvcnlJbmZvAFN5c3RlbS5MaW5xAGdldF9SZXNvdXJjZU1hbmFnZXIARXZl
bnRzT2JqZWN0V3JhcHBlcgBGaXJlRXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3Rv
cgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vydmlj
ZXMAU3lzdGVtLlJlc291cmNlcwBTVF85NTc2MDI0ODAwYjk0ODQwYjlmM2Y5YzIyOWMxNjhlYS5Q
cm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfOTU3NjAyNDgw
MGI5NDg0MGI5ZjNmOWMyMjljMTY4ZWEuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAEVudW1lcmF0
ZVJlbW90ZUZpbGVzAEdldEZpbGVzAEFkZFJhd1NldHRpbmdzAFN5c3RlbS5Db2xsZWN0aW9ucwBT
ZXNzaW9uT3B0aW9ucwBFbnVtZXJhdGlvbk9wdGlvbnMAVHJhbnNmZXJPcHRpb25zAFN1Y2Nlc3MA
Z2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdldF9FdmVudHMARXhpc3RzAGdldF9Sb3dzAENvbmNhdABG
b3JtYXQAT2JqZWN0AFdpblNDUG5ldABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABUcmFuc2Zl
ck9wZXJhdGlvblJlc3VsdABnZXRfQ3VycmVudABnZXRfQ291bnQAQ29udmVydABzZXRfVGltZW91
dABNb3ZlTmV4dABEYXRhUm93AGdldF9Bc3NlbWJseQBDcmVhdGVEaXJlY3RvcnkAZ2V0X0lzRGly
ZWN0b3J5AAAAPyQAUABhAGMAawBhAGcAZQA6ADoAcABXAGkAbgBTAGMAcABFAHgAZQBjAHUAdABh
AGIAbABlAFAAYQB0AGgAAA9DAHUAcwB0AEYAVABQAAAXQwB1AHMAdABGAFQAUABVAHMAZQByAAAV
QwB1AHMAdABGAFQAUABQAFcARAAAHyQAUABhAGMAawBhAGcAZQA6ADoAcABQAG8AcgB0AAApJABQ
AGEAYwBrAGEAZwBlADoAOgBwAHcAaQBuAFMAQwBQAEwAbwBnAAAxJABQAGEAYwBrAGEAZwBlADoA
OgBwAHcAaQBuAFMAQwBQAEwAbwBnAFAAYQB0AGgAAB9DAHUAcwB0AEkAbgBwAHUAdABGAG8AbABk
AGUAcgAAE1AAcgBvAGMAZQBzAHMARABUAAAhZgByAG8AbQBQAHIAbwBjAGUAcwBzAF8AZABhAHQA
ZQAAHXQAbwBQAHIAbwBjAGUAcwBzAF8AZABhAHQAZQAAJSQAUABhAGMAawBhAGcAZQA6ADoAcABG
AFQAUABGAGwAYQBnAAAfRgB0AHAAUABpAG4AZwBJAG4AdABlAHIAdgBhAGwAAAU2ADAAADFVAHMA
ZQByADoAOgB2AEYAbwBsAGQAZQByAHMATABpAHMAdABzAGYAbwByAEQATAAALVcAaQBuAHMAYwBw
AFMAZQBzAHMAaQBvAG4ATABvAGcARABMAC4AdAB4AHQAAClXAGkAbgBzAGMAcABEAGUAYgB1AGcA
TABvAGcARABMAC4AdAB4AHQAABlMAG8AYwBhAGwARABpAHIAUABhAHQAaAAAFUYAbwBsAGQAZQBy
AE4AYQBtAGUAAAcqAC4AKgAAAyoAAFtFAHIAcgBvAHIAIAB3AGgAZQBuACAAdQBzAGkAbgBnACAA
VwBpAG4AUwBDAFAAIAB0AG8AIABkAG8AdwBuAGwAbwBhAGQAIABmAGkAbABlADoAIAB7ADAAfQAA
cVMAVABfADkANQA3ADYAMAAyADQAOAAwADAAYgA5ADQAOAA0ADAAYgA5AGYAMwBmADkAYwAyADIA
OQBjADEANgA4AGUAYQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAA
J3kAeQB5AHkALQBNAE0ALQBkAGQAIABIAEgAOgBtAG0AOgBzAHMAAQDfclERGCVERZc6vWXT8TWi
AAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAhS4HFhIYDg4ODgIODg4RRRFJEk0RRRJRElUSWQ4V
El0CEmECFRJlARJhEmESaRJtBSAAEoCRBSAAEoCVBiABEoCZHAMgABwDIAAOBAABBg4EAAECHAUA
ARFFDgQgABFFCCAFAQgICAgIBiABARGApQUgAQERQQUgAgEODgUAAg4ODgUgAQERSQUgAQESTQUg
ABKArQMgAAgEIAASWQQgARwOBAABAg4GAAESgL0ODiADFRKAwQESYQ4OEYDFBxUSXQISYQIFIAIB
HBgYEAECFRKAwQEeABUSgMEBHgAVEl0CHgACBAoBEmEIFRJdAhJhEUUZEAICFRKAzQEeABUSgMEB
HgAVEl0CHgAeAQYKAhJhEUUHFRKAwQESYQggABUSZQETAAYVEmUBEmEEIAATAAQAAQ4OCyAEEoDZ
Dg4CEoChAyAAAgUgABKA4QUAAg4OHAggBQIIDg4OCAgAARKA5RGA6QUgABKA7QcgAgEOEoDtBAcB
EUUEIAEODgcAAgIRRRFFCLd6XFYZNOCJCImEXc2AgMyRCCJx7Eo8VtC/BAAAAAAEAQAAAAMGEUED
BhJ9BAYSgIEDBhIQAgYIAwYRFAMGEUUIBhUSXQISYQIDBhIcCQYVEl0CEmERRQQgABFBBAAAEn0F
AAASgIEGAAEBEoCBBAAAEhADAAABBSABAhJhBiABEUUSYQQoABFBBAgAEn0FCAASgIEECAASEAgB
AAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfOTU3
NjAyNDgwMGI5NDg0MGI5ZjNmOWMyMjljMTY4ZWEAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAy
MAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFt
ZRIuTkVUIEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMu
UmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJh
bCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRp
bWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAXD4AAAAAAAAAAAAAdj4AAAAgAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAGg+AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwA
AAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAzF3EHAAAAQDMXcQcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwA5ADUANwA2ADAAMgA0ADgAMAAwAGIAOQA0ADgANAAwAGIAOQBmADMAZgA5AGMAMgAyADkAYwAx
ADYAOABlAGEAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAzADYA
NAAuADIANAAwADEAMgAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA5
ADUANwA2ADAAMgA0ADgAMAAwAGIAOQA0ADgANAAwAGIAOQBmADMAZgA5AGMAMgAyADkAYwAxADYA
OABlAGEALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfADkANQA3ADYAMAAyADQAOAAwADAAYgA5ADQAOAA0ADAAYgA5AGYAMwBmADkAYwAyADIA
OQBjADEANgA4AGUAYQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwA5ADUANwA2ADAAMgA0ADgAMAAwAGIAOQA0ADgANAAwAGIAOQBmADMAZgA5AGMAMgAyADkA
YwAxADYAOABlAGEAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADcAMwA2ADQALgAyADQAMAAxADIAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADcAMwA2ADQALgAyADQAMAAxADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAiD4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\GetDirectoryListsFromFTPServerByCustomer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{06613133-2383-495C-89B0-46EF3A1C9CC9}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="GetDirectoryListsFromFTPServerByCustomer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_0e1c927ce39f433e94e7770fcbba2c05"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CustFTP,User::CustFTPPWD,User::CustFTPUser,User::CustInputFolder,User::CustomerID,User::CustomerLists,User::CustSC,User::ProcessDT,$Package::pCurHour,$Package::pDownloadDirectory,$Package::pFTPFlag,$Package::pHostName,$Package::pPassword,$Package::pPort,$Package::pProcessHour,$Package::pProcessingMinutes,$Package::pRemotePath,$Package::pUserName,$Package::pWinScpExecutablePath,$Package::pwinSCPLog,$Package::pwinSCPLogPath"
              ReadWriteVariables="User::fromProcess_date,User::toProcess_date,User::vFolderLists,User::vProcessTime">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Settings.get_Default():ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Sett" +
    "ings")]

namespace ST_0e1c927ce39f433e94e7770fcbba2c05.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[
#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.Collections.Generic;
using System.Collections;
using System.IO;
using System.Globalization;
using System.Linq;
#endregion

namespace ScrCallWinScp
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        public Protocol ptcl { get; private set; }

        public DateTime Process_date;
        public DateTime fromProcess_date;
        public DateTime toProcess_date;
        

        public void Main()
        {


            //String remoteFTPDirectory = Dts.Variables["$Package::pRemotePath"].Value.ToString();
            String winscpPath = Dts.Variables["$Package::pWinScpExecutablePath"].Value.ToString();

            //String ftpSite = String.IsNullOrWhiteSpace((string)Dts.Variables["$Package::pHostName"].Value.ToString())? (string)Dts.Variables["CustFTP"].Value.ToString(): (string)Dts.Variables["$Package::pHostName"].Value.ToString();
            ////String ftpSiteM = (string)Dts.Variables["CustFTP"].Value.ToString();
            //String username = String.IsNullOrWhiteSpace((string)Dts.Variables["$Package::pUserName"].GetSensitiveValue())?(string)Dts.Variables["CustFTPUser"].GetSensitiveValue(): (string)Dts.Variables["$Package::pUserName"].GetSensitiveValue();////(string)Dts.Variables["$Package::pUserName"].GetSensitiveValue();
            //String password = String.IsNullOrWhiteSpace((string)Dts.Variables["$Package::pPassword"].GetSensitiveValue())?(string)Dts.Variables["CustFTPPWD"].GetSensitiveValue(): (string)Dts.Variables["$Package::pPassword"].GetSensitiveValue();////(string)Dts.Variables["$Package::pPassword"].GetSensitiveValue();

            String ftpSite = (string)Dts.Variables["CustFTP"].Value.ToString();////(string)Dts.Variables["$Package::pHostName"].Value.ToString();
            String username = (string)Dts.Variables["CustFTPUser"].Value.ToString();////(string)Dts.Variables["$Package::pUserName"].GetSensitiveValue();
            String password = (string)Dts.Variables["CustFTPPWD"].Value.ToString();////(string)Dts.Variables["$Package::pPassword"].GetSensitiveValue();



            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::pPort"].Value.ToString());
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::pwinSCPLog"].Value);
            String winSCPLogPath = Dts.Variables["$Package::pwinSCPLogPath"].Value.ToString();
            String DownloadDirectory = Dts.Variables["$Package::pDownloadDirectory"].Value.ToString();
            String Cust_Code= Dts.Variables["CustomerID"].Value.ToString();
            String Cust_SC = Dts.Variables["CustSC"].Value.ToString();
            Process_date = Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString());//ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)

            String vProcessTime = Dts.Variables["vProcessTime"].Value.ToString();

            String CustInputFolder = Dts.Variables["CustInputFolder"].Value.ToString();

            String DownloadDirectoryRP;
            String LocalDirPath;
            int noOfFiles;

      
            Boolean sFTP = Convert.ToBoolean(Dts.Variables["$Package::pFTPFlag"].Value);
            if (sFTP)
            {
                ptcl = Protocol.Sftp;
            }
            else
            {
                ptcl = Protocol.Ftp;
            }
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();

            TimeSpan span = new TimeSpan(0, 0, 2, 0, 0);
            
            //------------------------------------------------------------------------STart Process Hour

            int ProcessHOur = Convert.ToInt32(Dts.Variables["$Package::pProcessHour"].Value.ToString());
            Boolean CurHour = Convert.ToBoolean(Dts.Variables["$Package::pCurHour"].Value);            
            DateTime pProcessDate = Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Date;
            int ProcessingMinutes = Convert.ToInt32(Dts.Variables["$Package::pProcessingMinutes"].Value.ToString());

            TimeSpan fromtime = new TimeSpan();
            TimeSpan totime = new TimeSpan();
            fromProcess_date = pProcessDate;
            toProcess_date = pProcessDate;
            
            if (CurHour)
            {
                ////fromtime = new TimeSpan(Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Hour-1, Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Minute, 0);
                ////totime =  new TimeSpan(Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Hour, Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Minute, 0);
                fromtime = new TimeSpan(0, ProcessingMinutes, 0);
                //if (totime.Equals(InitialTime))
                if (String.IsNullOrEmpty(vProcessTime))
                {
                    totime = new TimeSpan(Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Hour, Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Minute, 0);
                    Dts.Variables["vProcessTime"].Value = totime;
                    vProcessTime = totime.ToString(); // totime.ToString("HH:mm:ss", CultureInfo.InvariantCulture);
                }
                else
                {
                    totime = TimeSpan.Parse(vProcessTime, CultureInfo.InvariantCulture);

                }
                //totime = new TimeSpan(Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Hour, Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Minute, 0);
                fromtime = totime.Subtract(fromtime);
            }
            else
            {
                switch (ProcessHOur)
                {
                    case 1:
                        fromtime = new TimeSpan(0, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        //fromProcess_date = fromProcess_date.Add(fromtime);
                        //toProcess_date = toProcess_date.Add(totime);
                        ////fromProcess_date = fromProcess_date.AddHours(-ProcessHOur); //Convert.ToDateTime(pProcessDate.Date. (-ProcessHOur).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture));
                        ////toProcess_date = toProcess_date.AddHours(ProcessHOur);//Convert.ToDateTime(DateTime.Now.AddHours(-23).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture));
                        break;
                    case 2:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 3:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 4:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 6:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 7:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 8:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 9:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 10:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 11:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 12:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 13:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 14:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 15:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 16:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 17:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 18:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 19:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 20:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 21:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 22:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 23:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 24:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                        //default:
                        //    Console.WriteLine("Default case");
                        //    break;
                }
            }

            fromProcess_date = fromProcess_date.Add(fromtime);
            toProcess_date = toProcess_date.Add(totime);

            Dts.Variables["fromProcess_date"].Value = fromProcess_date;
            Dts.Variables["toProcess_date"].Value = toProcess_date;

            //------------------------------------------------------------------------END Process Hour



            // Setup session options
            SessionOptions sessionOptions = new SessionOptions
            {
                FtpMode = FtpMode.Passive,
                Protocol = ptcl,       // Can be SFTP, FTPS, or plain FTP
                HostName = ftpSite,
                UserName = username,
                Password = password,
                TimeoutInMilliseconds = 60000,
                //GiveUpSecurityAndAcceptAnySshHostKey = true
            };

            sessionOptions.AddRawSettings("PingIntervalSecs", "60");///PingIntervalSecs//FtpPingInterval


            //////// Set up the FTP session, specifying the path to the server directory
            //////Session session = new Session
            //////{
            //////    ExecutablePath = winscpPath
            //////};


            //////// Connect
            //////session.Open(sessionOptions);


            //////// The following is used to set up a DataTable object that will store the list of files/folders retrieved from the FTP server.
            //////DataTable dt = new DataTable();
            //////////dt.Columns.Add("FileName", typeof(String));
            //////////dt.Columns.Add("ModifiedDate", typeof(DateTime));
            //////dt.Columns.Add("fType", typeof(String));
            //////dt.Columns.Add("FolderName", typeof(String));    ///---DirPath
            //////dt.Columns.Add("FolderModifiedDate", typeof(DateTime));
            //////dt.Columns.Add("Cust_Code", typeof(String));
            //////dt.Columns.Add("Process_date", typeof(DateTime));
            //////dt.Columns.Add("LocalDirPath", typeof(String));
            //////dt.Columns.Add("NoOfFiles", typeof(int));
            //////dt.Columns.Add("ProcessingTime", typeof(int));
            //////dt.Columns.Add("ProcessingHour", typeof(int));



            //////// Specify which directory on the FTP server to list
            ///////// RemoteDirectoryInfo directory = session.ListDirectory(Dts.Variables["$Package::pRemotePath"].Value.ToString());

            //////IEnumerable<RemoteFileInfo> fileInfos = session.EnumerateRemoteFiles(CustInputFolder, null,EnumerationOptions.EnumerateDirectories | EnumerationOptions.AllDirectories);


            /////////foreach (RemoteFileInfo fileInfo in directory.Files)
            //////foreach (RemoteFileInfo fileInfo in fileInfos)
            //////{
            //////    if (fileInfo.IsDirectory)
            //////    {
            //////        // For each file found, add a new row to the DataTable object created above
            //////        noOfFiles=FilesCount(session, fileInfo);

            //////        ////LocalDirPath =  RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectory);
            //////        DownloadDirectoryRP = Path.Combine(DownloadDirectory, Cust_SC + "_" + Process_date.ToString("yyyy_MM_dd", CultureInfo.InvariantCulture));//String.Format(Process_date.ToShortDateString(),"yyy-dd-mm")                    

            //////        LocalDirPath = RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectoryRP);

            //////        DataRow dr = dt.NewRow();
            //////        dr["FolderName"] = fileInfo.FullName;
            //////        dr["FolderModifiedDate"] = fileInfo.LastWriteTime;
            //////        dr["fType"] = fileInfo.FileType;
            //////        dr["Cust_Code"] = Cust_Code;
            //////        dr["Process_date"] = Process_date;
            //////        dr["LocalDirPath"] = LocalDirPath;
            //////        dr["NoOfFiles"] = noOfFiles;
            //////        dr["ProcessingTime"] = ProcessingMinutes;
            //////        dr["ProcessingHour"] = ProcessHOur;
            //////        dt.Rows.Add(dr);
            //////    }
            //////}

            //////// After all of the files have been added to the DataTable object, set the SSIS variable vFileList
            ////////  to the value of that DataTable object.
            //////Dts.Variables["vFolderLists"].Value = dt;


            //////Dts.TaskResult = (int)ScriptResults.Success;
            ///


            using (Session session = new Session())
            {
                session.ExecutablePath = winscpPath;
                // Connect
                session.Open(sessionOptions);

                ////////////////////////////////////////////// Your code
                // The following is used to set up a DataTable object that will store the list of files/folders retrieved from the FTP server.
                DataTable dt = new DataTable();
                dt.Columns.Add("fType", typeof(String));
                dt.Columns.Add("FolderName", typeof(String));    ///---DirPath
                dt.Columns.Add("FolderModifiedDate", typeof(DateTime));
                dt.Columns.Add("Cust_Code", typeof(String));
                dt.Columns.Add("Process_date", typeof(DateTime));
                dt.Columns.Add("LocalDirPath", typeof(String));
                dt.Columns.Add("NoOfFiles", typeof(int));
                dt.Columns.Add("ProcessingTime", typeof(int));
                dt.Columns.Add("ProcessingHour", typeof(int));


                //// Specify which directory on the FTP server to list
                // RemoteDirectoryInfo directory = session.ListDirectory(Dts.Variables["$Package::pRemotePath"].Value.ToString());
                IEnumerable<RemoteFileInfo> fileInfos = session.EnumerateRemoteFiles(CustInputFolder, null, EnumerationOptions.EnumerateDirectories | EnumerationOptions.AllDirectories);


                ///foreach (RemoteFileInfo fileInfo in directory.Files)
                foreach (RemoteFileInfo fileInfo in fileInfos)
                {
                    if (fileInfo.IsDirectory)
                    {
                        // For each file found, add a new row to the DataTable object created above
                        noOfFiles = FilesCount(session, fileInfo);

                        ////LocalDirPath =  RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectory);
                        DownloadDirectoryRP = Path.Combine(DownloadDirectory, Cust_SC + "_" + Process_date.ToString("yyyy_MM_dd", CultureInfo.InvariantCulture));//String.Format(Process_date.ToShortDateString(),"yyy-dd-mm")                    

                        LocalDirPath = RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectoryRP);

                        DataRow dr = dt.NewRow();
                        dr["FolderName"] = fileInfo.FullName;
                        dr["FolderModifiedDate"] = fileInfo.LastWriteTime;
                        dr["fType"] = fileInfo.FileType;
                        dr["Cust_Code"] = Cust_Code;
                        dr["Process_date"] = Process_date;
                        dr["LocalDirPath"] = LocalDirPath;
                        dr["NoOfFiles"] = noOfFiles;
                        dr["ProcessingTime"] = ProcessingMinutes;
                        dr["ProcessingHour"] = ProcessHOur;
                        dt.Rows.Add(dr);
                    }
                }

                // After all of the files have been added to the DataTable object, set the SSIS variable vFileList
                //  to the value of that DataTable object.
                Dts.Variables["vFolderLists"].Value = dt;


                Dts.TaskResult = (int)ScriptResults.Success;

                session.Dispose();

            }
        }

        private  int FilesCount(Session session, RemoteFileInfo fileInfo)
        {
            ////List<string> filestc =
            int filescount =
                session.EnumerateRemoteFiles(
                    fileInfo.FullName, "*.*", EnumerationOptions.AllDirectories)                    
                    .Where(fi => Convert.ToDateTime(fi.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date & Convert.ToDateTime(fi.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) <= toProcess_date)                 
                    //.Where(fi => fi.LastWriteTime.Date == Process_date.Date)
                    //Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date
                    //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile => Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date & Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) <= toProcess_date);                 
                    //.Select(fi => fi.FullName)
                    .ToList().Count();
            return filescount;            
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0e1c927ce39f433e94e7770fcbba2c05.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_0e1c927ce39f433e94e7770fcbba2c05</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_0e1c927ce39f433e94e7770fcbba2c05</msb:DisplayName>
    <msb:ProjectId>{21BF6678-4FE1-4BE2-8C60-A5582D7ABCF3}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_0e1c927ce39f433e94e7770fcbba2c05.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0e1c927ce39f433e94e7770fcbba2c05")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_0e1c927ce39f433e94e7770fcbba2c05")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="ST_0e1c927ce39f433e94e7770fcbba2c05.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{AAB0A90C-B6A2-40F8-B009-E33D7722B331}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_0e1c927ce39f433e94e7770fcbba2c05</RootNamespace>
    <AssemblyName>ScrCallWinScp</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <BinaryItem
                Name="ScrCallWinScp.dll">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
AAAGAIwDFgcGABsEFgcGANgC6QYPAIoHAAAGAAUDGQYGAG8DGQYGAFADGQYGAAIEGQYGAKwDGQYG
AMUDGQYGABwDGQYGADcDXgQKAOADwQQKACACwQQGAKACFgcOAH4FYQAGAHkBmQUGALsFmQUOABkI
YQAOAN8FYQASAAIBjwAGACIApAAOAFIGYQASAM0IjwAGAKAFmQUGALsC6QYGAHIImQUGAKkGNgcG
AGoGBAYWAIsCUgUWAOwCUgUWADwC7wUKAEAFwQQaAMwHlAEaAAwBlAEGALUImQUGAHoEmQUGAJUG
mQUOAPoAYQASACsGjwAGAMQBmQUGACwBmQUSANQFjwAGADkAmQUGABQApAAOACgIYQAGAJoEVwAO
AJQEYQAGAJAGmQUSAEAGjwAGALkGBggGACABmQUGAD8AmQUeABUBhAYGADAApAAGAOAIGQYAAAAA
TgAAAAAAAQABAAEAEADJBXYGOQABAAEAAAAQAD0HmQdtAAUABwAAARAA8QeZB4EABwALAAMBAABL
CAAAZQAIAA4AAQDDANYBBgB+AtoBBgBrAtoBBgB8AtoBEQClBd4BEQD7AeIBEQDmAOYBBgaHAOoB
VoA7CO0BVoDbAe0BUCAAAAAAhgguBfEBAQBYIAAAAACBCDcFugABAGQgAAAAAIYAzwUGAAIAfCoA
AAAAgQCqCPYBAgCrKgAAAACGGNMGBgAEALQqAAAAAIEAAQD+AQQACCsAAAAAgxjTBgYABQAQKwAA
AACTCKUGBAIFADwrAAAAAJMI4wGXAAUAQysAAAAAkwjvAQkCBQBLKwAAAACWCIMIDwIGAFIrAAAA
AIYY0wYGAAYAWisAAAAAkRjZBhQCBgAAAAEAWAQAAAEA5wUAAAIAYQYAAAEAnwQAAAEAWAQJANMG
AQARANMGBgAZANMGCgApANMGEAAxANMGEAA5ANMGEABBANMGEABJANMGEABRANMGEABZANMGEABh
ANMGEABpANMGBgB5ANMGBgDRANMGBgD5ANMGFQBxAEMIRAAJAcgHSgARAYcFUAAZAUQEVwDZAHgE
WwAhAUYAXwAhAbEFZAAhAXcBaQCRANMGbwAhATcAeACJAGICfQCRANMGggApAfkIiQCJAOAGjgCJ
ADkEjgAZAU4EkgDpAAsClwCRAFwCnACRAGkIpQCJAL8ArACZANMGBgCZAPYAswCZAHoFugCZAGoB
EACZAF0BEACZANkAEACZAPwGAQCZAOsHwAChANMGBgChAIEEEAChAMQFxgCpANMGBgCpAPoHzABJ
AT4B0gBBAb8A2wChANYH5QAMAMUG/AAUAJ4IDAG5AOkIEQGJAHgEFQEpAWIIHQF5AbQBJAG5AFAB
WwCBAeoEHQGpANUIKgHBAJAFLwG5AIIBfQC5ALwBNQGpAFkIOQGRAb8APwGZAcQIEQGhAVQCBgAJ
AY8IAQChAFQCBgAcANMGTgGxAckBVAGxAb0IcwGxAa8IhQFxANMGBgCJAHgElgGJAAUFmwGJABsF
mwHZANMGBgBJAdwIowHhANMGqQEBAdMGBgAIACQAzAEIACgA0QEgAGsA0QEhAGsA0QEuAAsALAIu
ABMANQIuABsAVAIuACMAXQIuACsAhgIuADMAhgIuADsAhgIuAEMAXQIuAEsAjAIuAFMAhgIuAFsA
owJAAGsA0QFDAGMA0QFJAHsAVAJjAHMA0QFpAHsAVALAAGsA0QHhAGsA0QEbAJEBAgABAAMAAgAE
AAQAAAA7BRgCAACpBh0CAAAYAiICAACHCCcCAgABAAMAAQACAAMAAgAIAAUAAgAJAAcAAQAKAAcA
AgALAAkA9AAFAUUBBIAAAAEAAADCHF92AAAAAAAAdgYAAAQAAAAAAAAAAAAAALEBmwAAAAAADgAA
AAAAAAAAAAAAugGiBAAAAAABAAYABQBXJwAAAADDAXkIAAAAAAQAAAAAAAAAAAAAALEBjwAAAAAA
BAAAAAAAAAAAAAAAsQGZBQAAAAAOAAAAAAAAAAAAAAC6AWgAAAAAAAQAAAAAAAAAAAAAALEBzwEA
AAAAAAAAAAEAAABHBwAABQACAI8AbgGRAG4BkwBuAQAAADxGaWxlc0NvdW50PmJfXzhfMABJRW51
bWVyYWJsZWAxAElFbnVtZXJhdG9yYDEATGlzdGAxAFRvSW50MzIARnVuY2AyAFRvSW50MTYAPE1v
ZHVsZT4AU3lzdGVtLklPAFdpblNDUABNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFs
dWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBBZGQA
PHB0Y2w+a19fQmFja2luZ0ZpZWxkAHNldF9QYXNzd29yZABkZWZhdWx0SW5zdGFuY2UAc2V0X0Z0
cE1vZGUARGF0YVRhYmxlAFZhcmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5
cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X0Z1bGxOYW1lAHNldF9Vc2VyTmFtZQBzZXRf
SG9zdE5hbWUAVG9EYXRlVGltZQBnZXRfTGFzdFdyaXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5SdW50aW1lAENvbWJpbmUAZ2V0X0ZpbGVUeXBlAFdoZXJlAFN5c3RlbS5Db3JlAEZhaWx1
cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAGdldF9JbnZhcmlhbnRD
dWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFz
ZQBEaXNwb3NlAFBhcnNlAGdldF9EYXRlAGZyb21Qcm9jZXNzX2RhdGUAdG9Qcm9jZXNzX2RhdGUA
RWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJO
b25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0
dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRl
AFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRl
AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9NaW51dGUAZ2V0X1ZhbHVlAHNldF9W
YWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAHNldF9FeGVjdXRh
YmxlUGF0aABSZW1vdGVQYXRoAGZpAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFRyYW5zbGF0ZVJlbW90ZVBhdGhU
b0xvY2FsAG9wX0dyZWF0ZXJUaGFuT3JFcXVhbABvcF9MZXNzVGhhbk9yRXF1YWwAZ2V0X3B0Y2wA
c2V0X3B0Y2wAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNjckNhbGxX
aW5TY3AuZGxsAHNldF9Qcm90b2NvbABnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNv
dXJjZU1hbgBUb0Jvb2xlYW4AVGltZVNwYW4AT3BlbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU2Vz
c2lvbgBzZXNzaW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5
c3RlbS5SZWZsZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAFJl
bW90ZUZpbGVJbmZvAGZpbGVJbmZvAEN1bHR1cmVJbmZvAFNjckNhbGxXaW5TY3AAU3lzdGVtLkxp
bnEAQ2hhcgBJRm9ybWF0UHJvdmlkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBJRW51bWVyYXRvcgBH
ZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBnZXRfSG91cgBTeXN0ZW0uRGlhZ25vc3RpY3MAc2V0
X1RpbWVvdXRJbk1pbGxpc2Vjb25kcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5
c3RlbS5SZXNvdXJjZXMAU1RfMGUxYzkyN2NlMzlmNDMzZTk0ZTc3NzBmY2JiYTJjMDUuUHJvcGVy
dGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzBlMWM5MjdjZTM5ZjQz
M2U5NGU3NzcwZmNiYmEyYzA1LlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBFbnVtZXJhdGVSZW1v
dGVGaWxlcwBBZGRSYXdTZXR0aW5ncwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAU2Vz
c2lvbk9wdGlvbnMARW51bWVyYXRpb25PcHRpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1
bHRzAGdldF9Sb3dzAENvbmNhdABTdWJ0cmFjdABPYmplY3QAV2luU0NQbmV0AGdldF9EZWZhdWx0
AHNldF9UYXNrUmVzdWx0AGdldF9DdXJyZW50AEZpbGVzQ291bnQAQ29udmVydABUb0xpc3QATW92
ZU5leHQARGF0YVJvdwBOZXdSb3cAZ2V0X0Fzc2VtYmx5AGdldF9Jc0RpcmVjdG9yeQBJc051bGxP
ckVtcHR5AAAAPyQAUABhAGMAawBhAGcAZQA6ADoAcABXAGkAbgBTAGMAcABFAHgAZQBjAHUAdABh
AGIAbABlAFAAYQB0AGgAAA9DAHUAcwB0AEYAVABQAAAXQwB1AHMAdABGAFQAUABVAHMAZQByAAAV
QwB1AHMAdABGAFQAUABQAFcARAAAHyQAUABhAGMAawBhAGcAZQA6ADoAcABQAG8AcgB0AAApJABQ
AGEAYwBrAGEAZwBlADoAOgBwAHcAaQBuAFMAQwBQAEwAbwBnAAAxJABQAGEAYwBrAGEAZwBlADoA
OgBwAHcAaQBuAFMAQwBQAEwAbwBnAFAAYQB0AGgAADkkAFAAYQBjAGsAYQBnAGUAOgA6AHAARABv
AHcAbgBsAG8AYQBkAEQAaQByAGUAYwB0AG8AcgB5AAAVQwB1AHMAdABvAG0AZQByAEkARAAADUMA
dQBzAHQAUwBDAAATUAByAG8AYwBlAHMAcwBEAFQAABl2AFAAcgBvAGMAZQBzAHMAVABpAG0AZQAA
H0MAdQBzAHQASQBuAHAAdQB0AEYAbwBsAGQAZQByAAAlJABQAGEAYwBrAGEAZwBlADoAOgBwAEYA
VABQAEYAbABhAGcAAC0kAFAAYQBjAGsAYQBnAGUAOgA6AHAAUAByAG8AYwBlAHMAcwBIAG8AdQBy
AAAlJABQAGEAYwBrAGEAZwBlADoAOgBwAEMAdQByAEgAbwB1AHIAADkkAFAAYQBjAGsAYQBnAGUA
OgA6AHAAUAByAG8AYwBlAHMAcwBpAG4AZwBNAGkAbgB1AHQAZQBzAAAhZgByAG8AbQBQAHIAbwBj
AGUAcwBzAF8AZABhAHQAZQAAHXQAbwBQAHIAbwBjAGUAcwBzAF8AZABhAHQAZQAAIVAAaQBuAGcA
SQBuAHQAZQByAHYAYQBsAFMAZQBjAHMAAAU2ADAAAAtmAFQAeQBwAGUAABVGAG8AbABkAGUAcgBO
AGEAbQBlAAAlRgBvAGwAZABlAHIATQBvAGQAaQBmAGkAZQBkAEQAYQB0AGUAABNDAHUAcwB0AF8A
QwBvAGQAZQAAGVAAcgBvAGMAZQBzAHMAXwBkAGEAdABlAAAZTABvAGMAYQBsAEQAaQByAFAAYQB0
AGgAABNOAG8ATwBmAEYAaQBsAGUAcwAAHVAAcgBvAGMAZQBzAHMAaQBuAGcAVABpAG0AZQAAHVAA
cgBvAGMAZQBzAHMAaQBuAGcASABvAHUAcgAAA18AABV5AHkAeQB5AF8ATQBNAF8AZABkAAAZdgBG
AG8AbABkAGUAcgBMAGkAcwB0AHMAAAcqAC4AKgAAJ3kAeQB5AHkALQBNAE0ALQBkAGQAIABIAEgA
OgBtAG0AOgBzAHMAAXFTAFQAXwAwAGUAMQBjADkAMgA3AGMAZQAzADkAZgA0ADMAMwBlADkANABl
ADcANwA3ADAAZgBjAGIAYgBhADIAYwAwADUALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMA
bwB1AHIAYwBlAHMAAAAAAHGQsUvK4lxHqtyNJG0DF4cABCABAQgDIAABBSABARERBCABAQ4FIAEB
EXkoBxgODg4ODg4ODg4ODggIEUUIEUkRSRJNEUUSURJVFRJZARJdEl0SYQUgABKAhQUgABKAiQYg
ARKAjRwDIAAcAyAADgQAAQYOBAABAhwFAAERRQ4IIAUBCAgICAgEAAEIDgQgABFFBiADAQgICAQA
AQIOAyAACAQgAQEcBAAAEnUIAAIRSQ4SgJkGIAERSRFJBiABEUURSQYgAQERgJ0FIAEBEUEFIAIB
Dg4FIAEBEk0FIAASgKEIAAESgKURgKkJIAISgK0OEoClDiADFRKAtQESXQ4OEYC5BxUSgLUBEl0I
IAAVElkBEwAGFRJZARJdBCAAEwADIAACByACDg4SgJkGAAMODg4OBQACDg4OBCAAEmEFIAIBDhwD
IAADBSAAEoDJBSABARJhCBUSgNUCEl0CBSACARwYGRABAhUSgLUBHgAVEoC1AR4AFRKA1QIeAAIE
CgESXREQAQEVEoDdAR4AFRKAtQEeAAsQAQEIFRKAtQEeAAQHARFFBCABDg4HAAICEUURRQUgABKA
4QcgAgEOEoDhCLd6XFYZNOCJCImEXc2AgMyRCCJx7Eo8VtC/BAAAAAAEAQAAAAMGEUEDBhFFAwYS
cQMGEnUDBhIQAgYIAwYRFAQgABFBByACCBJREl0FIAECEl0EAAAScQUAAQESdQQAABIQAwAAAQQo
ABFBBAgAEnEECAASdQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dz
AQgBAAIAAAAAACgBACNTVF8wZTFjOTI3Y2UzOWY0MzNlOTRlNzc3MGZjYmJhMmMwNQAABQEAAAAA
FgEAEUNvcHlyaWdodCBAICAyMDE2AABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQO
FEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQAAALQAAADOyu++AQAAAJEA
AABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4w
LjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5
c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADI
QwAAAAAAAAAAAADiQwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1EMAAAAAAAAAAAAAAABfQ29y
RGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
wgMAAAAAAAAAAAAAwgM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAF92whwAAAEAX3bCHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BCIDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAP4CAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8A
MABlADEAYwA5ADIANwBjAGUAMwA5AGYANAAzADMAZQA5ADQAZQA3ADcANwAwAGYAYwBiAGIAYQAy
AGMAMAA1AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMwA2ADIA
LgAzADAAMwAwADMAAAAAAEQAEgABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBjAHIAQwBh
AGwAbABXAGkAbgBTAGMAcAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcA
aAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA2AAAAKgABAAEATABlAGcAYQBs
AFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAABMABIAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwA
ZQBuAGEAbQBlAAAAUwBjAHIAQwBhAGwAbABXAGkAbgBTAGMAcAAuAGQAbABsAAAAaAAkAAEAUABy
AG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAwAGUAMQBjADkAMgA3AGMAZQAzADkAZgA0ADMA
MwBlADkANABlADcANwA3ADAAZgBjAGIAYgBhADIAYwAwADUAAABCAA8AAQBQAHIAbwBkAHUAYwB0
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA2ADIALgAzADAAMwAwADMAAAAAAEYADwABAEEA
cwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA2ADIALgAzADAAMwAw
ADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAPQzAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\PostDownloadSuccessMailByCustomer"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:Description="Send Mail Task"
          DTS:Disabled="True"
          DTS:DTSID="{10F55EBA-8AB7-4BD0-8BFF-D34208583DF8}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="PostDownloadSuccessMailByCustomer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="MessageSource">@[User::EmailBody]="Downloaded Image of Customer -" +  @[User::CustSC] + " Dated - "+  RIGHT("0" + (DT_STR, 2, 1252) DATEPART("dd" , @[User::ProcessDT] ), 2) + "-" + RIGHT("0" + (DT_STR, 2, 1252) DATEPART("mm" , @[User::ProcessDT]), 2) + "-" +  (DT_STR, 4, 1252) DATEPART("yy" , @[User::ProcessDT])</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="Subject">"Image Download Confirmation of Customer-" +  @[User::CustSC]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{2D71F943-CD6B-4BDB-943C-CDD9D78D3964}"
              SendMailTask:From="info@creativeclippingpath.com"
              SendMailTask:To="s.ullah@creativeclippingpath.com"
              SendMailTask:Subject="Image Download Confirmation of Customer-"
              SendMailTask:MessageSource="Downloaded Image of Customer - Dated - 29-02-2020" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{953D92CC-291B-4F49-866C-DEE11D44582A}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="UploadFTPFolderListsToDBByCustomer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_4ab634a12f29442da3af46ed15b7fd1d"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::vFolderLists"
              ReadWriteVariables="User::vFoldersListsforDL">
              <ProjectItem
                Name="ST_4ab634a12f29442da3af46ed15b7fd1d.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{88FBD480-5258-4643-9302-089EC24525D0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_4ab634a12f29442da3af46ed15b7fd1d</RootNamespace>
    <AssemblyName>FTPFolderstoDB</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Settings.get_Default():ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Sett" +
    "ings")]

namespace ST_4ab634a12f29442da3af46ed15b7fd1d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
#endregion

namespace FTPFolderstoDB
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
    
            ConnectionManager cm;
            SqlConnection sqlConn;

            try
            {
                cm = Dts.Connections["CCPL"];
                sqlConn = (SqlConnection)cm.AcquireConnection(Dts.Transaction);


                DataTable dtFolders = (DataTable)Dts.Variables["User::vFolderLists"].Value;


                if (dtFolders.Rows.Count > 0)
                {

                    using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConn))
                    {
                        //Set the database table name
                        sqlBulkCopy.DestinationTableName = "[IES_FTPDirectoryByCustomer]";

                        ////[OPTIONAL]: Map the DataTable columns with that of the database table
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[1].ColumnName, "DirPath");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[3].ColumnName, "Cust_Code");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[4].ColumnName, "Process_date");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[5].ColumnName, "LocalDirPath");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[6].ColumnName, "NoOfFiles");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns["ProcessingHour"].ColumnName, "ProcessingHour");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns["ProcessingTime"].ColumnName, "ProcessingTime");


                        sqlBulkCopy.WriteToServer(dtFolders);
                        sqlConn.Close();
                    }

                    Dts.Variables["vFoldersListsforDL"].Value = dtFolders;

                }                               

                cm.ReleaseConnection(sqlConn);

            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                        string.Format("Error when Uploading Remote Folders to Database: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
                throw;
            }
            

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_4ab634a12f29442da3af46ed15b7fd1d</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_4ab634a12f29442da3af46ed15b7fd1d</msb:DisplayName>
    <msb:ProjectId>{9A86E3D2-F5C8-46B9-8207-1E2E5C48FC1A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_4ab634a12f29442da3af46ed15b7fd1d.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_4ab634a12f29442da3af46ed15b7fd1d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_4ab634a12f29442da3af46ed15b7fd1d")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_4ab634a12f29442da3af46ed15b7fd1d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="FTPFolderstoDB.dll">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
VoD5AOUAUCAAAAAAhgAyBAYAAQB0IgAAAACGGJIFBgABAHwiAAAAAIMYkgUGAAEAhCIAAAAAkwhA
BekAAQCwIgAAAACTCAEB7gABALciAAAAAJMIDQHzAAEAvyIAAAAAlgjqBvkAAgDGIgAAAACGGJIF
BgACAM4iAAAAAJEYmAX+AAIAAAABAEgDCQCSBQEAEQCSBQYAGQCSBQoAKQCSBRAAMQCSBRAAOQCS
BRAAQQCSBRAASQCSBRAAUQCSBRAAWQCSBRAAYQCSBRAAaQCSBQYAqQCSBQYA0QCSBRUA4QCSBQYA
cQCyBigA6QCaBi0A8QALBDIA6QBsBDgAeQDlBDwA6QBkBkEA+QALBEYAAQE0AzgAiQDTBk0AEQEb
B1MAkQCSBVcAkQCsABAAkQByBl0AiQCOBmMAIQELBGkAKQHFAHAAGQFVAHQAIQELBHwAkQB6BYMA
OQF4AQYAQQF+AQYAAQE+A4kAeQD3BIkA6QDIBo4AUQHcBpQASQGIBZoA6QD2BgEAcQCSBQYAsQCS
BQYAWQGaAKMAWQElB6wAuQCSBbIA2QCSBQYACAAUAMwACAAYANEAKQBzADkBLgALABEBLgATABoB
LgAbADkBLgAjAEIBLgArAGsBLgAzAGsBLgA7AGsBLgBDAEIBLgBLAHEBLgBTAGsBLgBbAIgBQwBj
ANEASQBzADkBYQB7ANEAYwBrANEAGwADAAEABAADAAAARAUCAQAAIQEHAQAA7gYMAQIABAADAAIA
BQAFAAEABgAFAAIABwAHAASAAAABAAAAsxxpXAAAAAAAAAoAAAAEAAAAAAAAAAAAAAC6AEwAAAAA
AA4AAAAAAAAAAAAAAMMAiAMAAAAADgAAAAAAAAAAAAAAwwAZAAAAAAAEAAAAAAAAAAAAAAC6AEAA
AAAAAAQAAAAAAAAAAAAAALoAFAQAAAAAAAAAAAEAAADjBQAABQACAAAAAAAAPE1vZHVsZT4ARlRQ
Rm9sZGVyc3RvREIATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVt
LkRhdGEAbXNjb3JsaWIAQWRkAGRlZmF1bHRJbnN0YW5jZQBEYXRhVGFibGUAVmFyaWFibGUASURp
c3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAc2V0X0Rlc3RpbmF0
aW9uVGFibGVOYW1lAGdldF9Db2x1bW5OYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRp
bWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZwBTdHJpbmcATWljcm9zb2Z0LlNxbFNlcnZlci5T
Y3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0
T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEZUUEZvbGRlcnN0b0RCLmRsbABnZXRf
SXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU3lzdGVt
LkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9uAFN5c3Rl
bS5SZWZsZWN0aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24ARGF0YUNvbHVt
bkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24ARGJDb25uZWN0aW9uAEFjcXVpcmVDb25uZWN0
aW9uAFJlbGVhc2VDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRh
LkNvbW1vbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2Vy
AEV2ZW50c09iamVjdFdyYXBwZXIAV3JpdGVUb1NlcnZlcgBGaXJlRXJyb3IALmN0b3IALmNjdG9y
AFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3Rl
bS5SZXNvdXJjZXMAU1RfNGFiNjM0YTEyZjI5NDQyZGEzYWY0NmVkMTViN2ZkMWQuUHJvcGVydGll
cy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzRhYjYzNGExMmYyOTQ0MmRh
M2FmNDZlZDE1YjdmZDFkLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBnZXRfQ29sdW1uTWFwcGlu
Z3MAU2V0dGluZ3MAZ2V0X0NvbHVtbnMAZ2V0X0Nvbm5lY3Rpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBT
Y3JpcHRSZXN1bHRzAGdldF9FdmVudHMAZ2V0X1Jvd3MARm9ybWF0AE9iamVjdABnZXRfRGVmYXVs
dABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0NvdW50AGdldF9Bc3Nl
bWJseQBTcWxCdWxrQ29weQAAAAAJQwBDAFAATAAAJVUAcwBlAHIAOgA6AHYARgBvAGwAZABlAHIA
TABpAHMAdABzAAA5WwBJAEUAUwBfAEYAVABQAEQAaQByAGUAYwB0AG8AcgB5AEIAeQBDAHUAcwB0
AG8AbQBlAHIAXQAAD0QAaQByAFAAYQB0AGgAABNDAHUAcwB0AF8AQwBvAGQAZQAAGVAAcgBvAGMA
ZQBzAHMAXwBkAGEAdABlAAAZTABvAGMAYQBsAEQAaQByAFAAYQB0AGgAABNOAG8ATwBmAEYAaQBs
AGUAcwAAHVAAcgBvAGMAZQBzAHMAaQBuAGcASABvAHUAcgAAHVAAcgBvAGMAZQBzAHMAaQBuAGcA
VABpAG0AZQAAJXYARgBvAGwAZABlAHIAcwBMAGkAcwB0AHMAZgBvAHIARABMAABpRQByAHIAbwBy
ACAAdwBoAGUAbgAgAFUAcABsAG8AYQBkAGkAbgBnACAAUgBlAG0AbwB0AGUAIABGAG8AbABkAGUA
cgBzACAAdABvACAARABhAHQAYQBiAGEAcwBlADoAIAB7ADAAfQAAcVMAVABfADQAYQBiADYAMwA0
AGEAMQAyAGYAMgA5ADQANAAyAGQAYQAzAGEAZgA0ADYAZQBkADEANQBiADcAZgBkADEAZAAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAA8EzIWyTxHUuqgGWgI4y+
rwAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERZQwHBRI9EkESRRJJEk0EIAASdQQgABJ5BSABEj0c
AyAAHAQgARwcBCAAEn0GIAESgIEcBSAAEoCFAyAACAUgAQESQQUgABKAjQUgABKAkQYgARKAlQgD
IAAOByACEoCZDg4GIAESgJUOBSABARJFBCABARwFIAASgKUFAAIODhwIIAUCCA4ODggIAAESgK0R
gLEFIAASgLUHIAIBDhKAtQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJdAwYSYQMGEhAC
BggDBhEUBAAAEl0EAAASYQUAAQESYQQAABIQAwAAAQQIABJdBAgAEmEECAASEAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfNGFiNjM0YTEyZjI5
NDQyZGEzYWY0NmVkMTViN2ZkMWQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAASQEAGi5O
RVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZy
YW1ld29yayA0LjUAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJl
YWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNL
ZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNl
U2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAUNAAAAAAAAAAAAAAuNAAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAIDQAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQ
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAAMoDAAAAAAAAAAAAAMoDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQBpXLMcAAABAGlcsxw/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAQqAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAGAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfADQAYQBiADYAMwA0AGEAMQAyAGYAMgA5ADQANAAyAGQAYQAzAGEAZgA0ADYAZQBkADEA
NQBiADcAZgBkADEAZAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3
ADMANAA3AC4AMgAzADYANQA3AAAAAABGABMAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAEYA
VABQAEYAbwBsAGQAZQByAHMAdABvAEQAQgAuAGQAbABsAAAAAABIABIAAQBMAGUAZwBhAGwAQwBv
AHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEA
AQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAE4AEwABAE8AcgBpAGcAaQBu
AGEAbABGAGkAbABlAG4AYQBtAGUAAABGAFQAUABGAG8AbABkAGUAcgBzAHQAbwBEAEIALgBkAGwA
bAAAAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA0AGEAYgA2ADMANABh
ADEAMgBmADIAOQA0ADQAMgBkAGEAMwBhAGYANAA2AGUAZAAxADUAYgA3AGYAZAAxAGQAAABCAA8A
AQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA0ADcALgAyADMANgA1
ADcAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcA
MwA0ADcALgAyADMANgA1ADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABANAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\LoopAllCustomers.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{2DFE8E40-3732-46E4-8AFE-2D3F7FAB68C9}"
          DTS:From="Package\LoopAllCustomers\GetDirectoryListsFromFTPServerByCustomer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{6C4AE098-8721-4830-9581-DBBB317B1A5C}"
          DTS:From="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{DBAD2AE8-BECF-4816-B7A3-BA11EDA91548}"
          DTS:From="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\LoopAllCustomers\PostDownloadSuccessMailByCustomer" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{8FA23C00-6A5D-45C2-9985-5720FC0C7ED4}"
          DTS:ObjectName="{8FA23C00-6A5D-45C2-9985-5720FC0C7ED4}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::CustomerID" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{F9E97EB8-D817-415B-A169-5C368EB7073F}"
          DTS:ObjectName="{F9E97EB8-D817-415B-A169-5C368EB7073F}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::CustSC" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{E040FDA0-B73F-4041-ACF2-1EE8CAC9CBAB}"
          DTS:ObjectName="{E040FDA0-B73F-4041-ACF2-1EE8CAC9CBAB}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::CustInputFolder" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{985B7793-9D7B-4D86-B3AC-BA382CB2BC38}"
          DTS:ObjectName="{985B7793-9D7B-4D86-B3AC-BA382CB2BC38}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::CustFTP" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{9C72A385-27DC-4BD6-BD97-AE0A0E3AA186}"
          DTS:ObjectName="{9C72A385-27DC-4BD6-BD97-AE0A0E3AA186}"
          DTS:ValueIndex="4"
          DTS:VariableName="User::CustFTPUser" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{FF522221-FC2E-467D-A068-3E5BE37C239C}"
          DTS:ObjectName="{FF522221-FC2E-467D-A068-3E5BE37C239C}"
          DTS:ValueIndex="5"
          DTS:VariableName="User::CustFTPPWD" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{655B0605-9453-4A5D-B967-3AF5899F13BF}"
      DTS:From="Package\GetAllCustomersfromDB"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\LoopAllCustomers" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="192,41.6"
          Id="Package\GetAllCustomersfromDB"
          TopLeft="155.333327160941,25.6533335372074" />
        <NodeLayout
          Size="284.8,41.6"
          Id="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer"
          TopLeft="56.933329545127,136.000001983642" />
        <NodeLayout
          Size="290.4,41.6"
          Id="Package\LoopAllCustomers\GetDirectoryListsFromFTPServerByCustomer"
          TopLeft="34.9000009536744,6.06000052897141" />
        <NodeLayout
          Size="261.6,41.6"
          Id="Package\LoopAllCustomers\PostDownloadSuccessMailByCustomer"
          TopLeft="72.7999814033515,196.586668578678" />
        <NodeLayout
          Size="265.6,41.6"
          Id="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer"
          TopLeft="50.9333297835457,68.7466681158279" />
        <EdgeLayout
          Id="Package\LoopAllCustomers.PrecedenceConstraints[Constraint]"
          TopLeft="34.9000009536744,26.8600005289714">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="16.0333288298713,62.6866675868564"
              Start="0,0"
              End="8.53332882987132,62.6866675868564">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,58.6866675868564" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,58.6866675868564"
                    Point2="-22.5,62.6866675868564"
                    Point3="-18.5,62.6866675868564" />
                  <mssgle:LineSegment
                    End="8.53332882987132,62.6866675868564" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 1]"
          TopLeft="183.733329783546,110.346668115828">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.5999997615813,25.6533338678145"
              Start="0,0"
              End="15.5999997615813,18.1533338678145">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,8.82666693390723" />
                  <mssgle:CubicBezierSegment
                    Point1="0,8.82666693390723"
                    Point2="0,12.8266669339072"
                    Point3="4,12.8266669339072" />
                  <mssgle:LineSegment
                    End="11.5999997615813,12.8266669339072" />
                  <mssgle:CubicBezierSegment
                    Point1="11.5999997615813,12.8266669339072"
                    Point2="15.5999997615813,12.8266669339072"
                    Point3="15.5999997615813,16.8266669339072" />
                  <mssgle:LineSegment
                    End="15.5999997615813,18.1533338678145" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 2]"
          TopLeft="56.933329545127,156.800001983642">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.8666518582244,60.5866665950353"
              Start="0,0"
              End="8.36665185822443,60.5866665950353">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,56.5866665950353" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,56.5866665950353"
                    Point2="-22.5,60.5866665950353"
                    Point3="-18.5,60.5866665950353" />
                  <mssgle:LineSegment
                    End="8.36665185822443,60.5866665950353" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="447.2,304"
          Size="447.2,347.2"
          Id="Package\LoopAllCustomers"
          TopLeft="395.333317624199,0.693333338843161" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="347.333327160941,46.4533335372074">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="47.999990463258,127.839999801636"
              Start="0,0"
              End="40.499990463258,127.839999801636">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.999995231629,0" />
                  <mssgle:CubicBezierSegment
                    Point1="19.999995231629,0"
                    Point2="23.999995231629,0"
                    Point3="23.999995231629,4" />
                  <mssgle:LineSegment
                    End="23.999995231629,123.839999801636" />
                  <mssgle:CubicBezierSegment
                    Point1="23.999995231629,123.839999801636"
                    Point2="23.999995231629,127.839999801636"
                    Point3="27.999995231629,127.839999801636" />
                  <mssgle:LineSegment
                    End="40.499990463258,127.839999801636" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>