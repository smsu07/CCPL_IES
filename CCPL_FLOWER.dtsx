<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/30/2016 2:05:17 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="TDSDEV01"
  DTS:CreatorName="TDSDEV01\Tim"
  DTS:DTSID="{80DA3441-1A7A-4A7F-9D78-50CAFBE7BA22}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="1033"
  DTS:ObjectName="CCPL_FLOWER"
  DTS:PackageType="5"
  DTS:VersionBuild="288"
  DTS:VersionGUID="{3BBE09F1-2A8A-4CEF-8662-F6D694BF240E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CCPL]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{BF9DC855-1AAA-41D4-BF65-65E1816C3FC1}"
      DTS:ObjectName="CCPL">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[$Package::CCPL_ConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CCPL_SD01\CCPL_DEV;Initial Catalog=CCPL;Integrated Security=True;Application Name=SSIS-CCPL_FTP_IDL_Demo-{B0E998D0-8253-42CD-823A-DC34DE7DF30C}CCPL_SD01\CCPL_DEV.CCPL;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP_CCPL]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{5C933721-9323-4A81-8215-D974302F9E3E}"
      DTS:ObjectName="SMTP_CCPL">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[$Package::SMTP_CCPL_ConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=mail.creativeclippingpath.com;UseWindowsAuthentication=False;EnableSsl=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{058A9BF2-1E80-47DC-A445-97D13FD40E26}"
      DTS:ObjectName="CCPL_ConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Data Source=CCPL_SD01\CCPL_DEV;Initial Catalog=CCPL;Integrated Security=True;Application Name=SSIS-CCPL_FTP_IDL_Demo-{B0E998D0-8253-42CD-823A-DC34DE7DF30C}CCPL_SD01\CCPL_DEV.CCPL;</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{DE04143B-6E0D-435B-83B2-6FC9B719ABE4}"
      DTS:ObjectName="GetAllCustomersfromDB_SqlStatementSource">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">SELECT Cust_Code, Cust_ShortCode, InputFolder  FROM     IES_Customers WHERE Cust_Code ='C_00006'</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:Description="If true then the package will run for the cusrrent date else mentioned date in pProcessDate"
      DTS:DTSID="{1BDB0347-0F13-40B9-8EE3-E53662638A5D}"
      DTS:ObjectName="pCurDate">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:Description="Will dynamically set the time  if the value is true "
      DTS:DTSID="{BC292E52-14CA-4CC6-A791-6B83C9371155}"
      DTS:ObjectName="pCurHour">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{80DBAE7F-9B86-449D-966E-E6518BA1A6E2}"
      DTS:ObjectName="pDownloadDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">E:\Projects\FTP_Image_RnD\FTPDownload\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:DTSID="{86DE931F-56DA-4959-81AD-0DEA0EBE1643}"
      DTS:ObjectName="pFTPFlag">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">0</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="The name of the remote SFTP server."
      DTS:DTSID="{5E393D00-0D6D-4F46-B93D-8841AD467705}"
      DTS:ObjectName="pHostName"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">ftp.ccplftp.com</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="Password for the FTP/SFTP login"
      DTS:DTSID="{DF5549A3-E50B-441C-8FE4-009A087CB94C}"
      DTS:ObjectName="pPassword"
      DTS:Required="True"
      DTS:Sensitive="True">
      <DTS:Property
        DTS:Name="ParameterValue">
        <DTS:Property
          DTS:DataType="8"
          DTS:Name="ParameterValue"
          Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAxqrTZKLPiUG4mrn9IUi28QAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAADslSmCvQzcr09yt5xw1blyhFMpD5DybdnkRDP2uGW5jQAAAAAOgAAAAAIAACAAAACq/twptiwN2OKpjDJgNxqnoI+YWfBnJrp/xvFseu4HlzAAAAA/SN2ps1Bz+QQIIGJ8kzprXcp+OTvqUgvNMb4cm6srlyJGjR0gbDfkArfjXdgtf1tAAAAAHQKD7nd15g4LohMyj6OMD6anexDKYtlNm06B4IaqpiNnY5jj4eITIEdcz9JAgcADyBCMlM4EOoRWR2aPeZFoTQ</DTS:Property>
      </DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{AD047C2A-17AD-4852-A79F-7F55FCED3386}"
      DTS:ObjectName="pPort">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">21</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="7"
      DTS:DTSID="{EC2FEC01-E63E-4FD7-8F00-50539A5640D8}"
      DTS:ObjectName="pProcessDate">
      <DTS:Property
        DTS:DataType="7"
        DTS:Name="ParameterValue">2/24/2020 6:40:00 PM</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:DTSID="{D92EA402-F552-4530-B86D-5CD3E7768A8F}"
      DTS:ObjectName="pProcessHour">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">17</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="3"
      DTS:Description="This value will be used in gathering the files for the sepcified minutes earlier"
      DTS:DTSID="{211247C7-AA96-455D-8C6E-C1117E523721}"
      DTS:ObjectName="pProcessingMinutes">
      <DTS:Property
        DTS:DataType="3"
        DTS:Name="ParameterValue">60</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="Remote path on the SFTP server (in the format of /folder1/folder2)"
      DTS:DTSID="{4F14CD52-EC9A-47F5-AED8-13ED4BDABDC5}"
      DTS:ObjectName="pRemotePath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">/public_html/ccplftp.com/flora/Input</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="User name for the SFTP login"
      DTS:DTSID="{875C9927-3E8E-4201-8B87-D4946E9885D8}"
      DTS:ObjectName="pUserName"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">creative</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:Description="The full local path to the WinSCP executable (winscp.exe)"
      DTS:DTSID="{10DF2656-9B91-408B-8165-092DF648C1C1}"
      DTS:ObjectName="pWinScpExecutablePath"
      DTS:Required="True">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">C:\Program Files (x86)\WinSCP\WinSCP.exe</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="11"
      DTS:DTSID="{727C6F54-1DB1-4BD2-ACE7-FC1CAE336B5A}"
      DTS:ObjectName="pwinSCPLog">
      <DTS:Property
        DTS:DataType="11"
        DTS:Name="ParameterValue">-1</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{F56641E8-7087-4623-B1AC-2A45E23CFB8B}"
      DTS:ObjectName="pwinSCPLogPath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">E:\Projects\CCPL\IES\Source\IDL\CCPL_FTP_DL</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{0F0FEFB4-12D5-4D8B-95BA-B60F1FEB4F0D}"
      DTS:ObjectName="SMTP_CCPL_ConnectionString">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">SmtpServer=mail.creativeclippingpath.com;UseWindowsAuthentication=False;EnableSsl=False;</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5F5A0EF7-6A1A-438F-8273-A0E4C851EA4F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustEmail">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0399CC7C-E168-4B55-80EA-02B239A64F36}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustInputFolder">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{81A99075-84F4-45B8-A41A-C1382CD67E38}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustomerID">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F3042CB2-85DB-41FB-9A31-3B893F5DD466}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="CustomerLists">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{80C363D6-46E3-48CC-B45B-081D663710FE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CustSC">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{94004FD3-F342-4037-AE66-EFCCE9EC3048}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailBody">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{92C03DB7-D2A9-4AEE-952D-E17DC59ABF6E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="fromProcess_date">
      <DTS:VariableValue
        DTS:DataType="7">2/4/2020 5:02:13 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C6A096D2-76FC-4E3E-81B7-F91681965364}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Package::pCurDate] == TRUE? GETDATE(): @[$Package::pProcessDate]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessDT">
      <DTS:VariableValue
        DTS:DataType="7">2/24/2020 6:40:00 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{91887744-3BF7-44CE-90CB-BD69942DE0C5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="toProcess_date">
      <DTS:VariableValue
        DTS:DataType="7">2/4/2020 5:02:33 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{248C6518-7D94-4A98-A9BB-785C2FB24256}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFolderLists">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C466FBEB-9BA1-404D-8149-F414E9E43464}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="vFoldersListsforDL">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\GetAllCustomersfromDB"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{19212115-4A87-499A-BA74-98F781467B77}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="GetAllCustomersfromDB"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:PropertyExpression
        DTS:Name="SqlStatementSource">@[$Package::GetAllCustomersfromDB_SqlStatementSource]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{BF9DC855-1AAA-41D4-BF65-65E1816C3FC1}"
          SQLTask:SqlStatementSource="SELECT Cust_Code, Cust_ShortCode, InputFolder  FROM     IES_Customers WHERE Cust_Code ='C_00006'"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::CustomerLists" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="$Package::GetAllCustomersfromDB_SqlStatementSource"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="16"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\LoopAllCustomers"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{59EA2075-2632-47AF-89A5-1953A3CD233C}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoopAllCustomers">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{406A49D2-1FBB-411F-AEB9-D462288C389F}"
        DTS:ObjectName="{E5167D82-71E7-463E-82E6-81C8E05C1989}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::CustomerLists" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{21889E66-8B34-4F42-830B-EEFB4A513E0A}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="DownloadAllFilesByCustomerToLocalServer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_9576024800b94840b9f3f9c229c168ea"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CustInputFolder,User::fromProcess_date,User::ProcessDT,User::toProcess_date,User::vFoldersListsforDL,$Package::pCurHour,$Package::pFTPFlag,$Package::pHostName,$Package::pPassword,$Package::pPort,$Package::pProcessDate,$Package::pProcessHour,$Package::pProcessingMinutes,$Package::pRemotePath,$Package::pUserName,$Package::pWinScpExecutablePath,$Package::pwinSCPLog,$Package::pwinSCPLogPath">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_9576024800b94840b9f3f9c229c168ea.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{722547D9-BC39-411E-B392-3AF4BFB5598D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9576024800b94840b9f3f9c229c168ea</RootNamespace>
    <AssemblyName>ST_9576024800b94840b9f3f9c229c168ea</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Settings.get_Default():ST_9576024800b94840b9f3f9c229c168ea.Properties.Sett" +
    "ings")]

namespace ST_9576024800b94840b9f3f9c229c168ea.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
#endregion

namespace ST_9576024800b94840b9f3f9c229c168ea
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        public Protocol ptcl { get; private set; }

        public void Main()
		{
            // TODO: Add your code here

            //String remoteFTPDirectory = Dts.Variables["$Package::pRemotePath"].Value.ToString();
            String winscpPath = Dts.Variables["$Package::pWinScpExecutablePath"].Value.ToString();
            String ftpSite = (string)Dts.Variables["$Package::pHostName"].Value.ToString();
            String username = (string)Dts.Variables["$Package::pUserName"].GetSensitiveValue();
            String password = (string)Dts.Variables["$Package::pPassword"].GetSensitiveValue();
            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::pPort"].Value.ToString());
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::pwinSCPLog"].Value);
            String winSCPLogPath = Dts.Variables["$Package::pwinSCPLogPath"].Value.ToString();          
            String CustInputFolder = Dts.Variables["CustInputFolder"].Value.ToString();
            String DownloadDirectoryRP;
            String remoteFTPDirectory;

            DateTime pProcessDate = Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Date;
            DateTime fromProcess_date = pProcessDate;
            DateTime toProcess_date = pProcessDate;


            fromProcess_date = Convert.ToDateTime(Dts.Variables["fromProcess_date"].Value.ToString());
            toProcess_date = Convert.ToDateTime(Dts.Variables["toProcess_date"].Value.ToString()); 

            //MessageBox.Show("from time-" + fromProcess_date.ToString() + "to time-"+ toProcess_date.ToString());


            TransferOptions transferOptions = new TransferOptions();

            Boolean sFTP = Convert.ToBoolean(Dts.Variables["$Package::pFTPFlag"].Value);
            if (sFTP)
            {
                ptcl = Protocol.Sftp;
            }
            else
            {
                ptcl = Protocol.Ftp;
            }
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();

            TimeSpan span = new TimeSpan(0, 0, 1, 0, 0);

            // Setup session options
            SessionOptions sessionOptions = new SessionOptions
            {
                FtpMode = FtpMode.Passive,
                Protocol = ptcl,       // Can be SFTP, FTPS, or plain FTP
                HostName = ftpSite,
                UserName = username,
                Password = password,
                //GiveUpSecurityAndAcceptAnySshHostKey = true
            };

            sessionOptions.AddRawSettings("FtpPingInterval", "60");


            ////// Set up the FTP session, specifying the path to the server directory
            try
            {
                DataTable dtFolders = (DataTable)Dts.Variables["User::vFoldersListsforDL"].Value;

                using (Session session = new Session())
                {
                    // WinSCP .NET assembly must be in GAC to be used with SSIS,
                    // set path to WinSCP.exe explicitly, if using non-default path.
                    session.ExecutablePath = winscpPath;


                    if (winSCPLog)
                    {
                        session.SessionLogPath = @winSCPLogPath + @"WinscpSessionLogDL.txt";
                        session.DebugLogPath = @winSCPLogPath + @"WinscpDebugLogDL.txt";
                    }

                    // Connect
                    //session.Timeout = new TimeSpan(0, 2, 0); // two minutes
                    session.Timeout = span;
                    session.Open(sessionOptions);

                    //////-------------------------Download Files from the Path scpecified in the Object Lists      

                    //transferOptions.TransferMode = TransferMode.Binary;

                    if (dtFolders.Rows.Count > 0)
                    {
                        foreach (DataRow row in dtFolders.Rows)
                        {

                            DownloadDirectoryRP = row["LocalDirPath"].ToString();
                            remoteFTPDirectory = row["FolderName"].ToString();

                            // Create local subdirectory, if it does not exist yet
                            if (!Directory.Exists(DownloadDirectoryRP))
                            {
                                Directory.CreateDirectory(DownloadDirectoryRP);
                            }

                            //MessageBox.Show(remoteFTPDirectory + " to " + DownloadDirectoryRP);

                            //-----------------------Latest Files
                            //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.txt", EnumerationOptions.None).Where(file => !file.IsDirectory).OrderByDescending(file => file.LastWriteTime);// Take(10);

                            //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile=>sfile.LastWriteTime.Date ==DateTime.Today.Date & sfile.LastWriteTime.Hour== DateTime.Today.Hour);// Take(10);

                            //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile =>Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date );

                            IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile => Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date & Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) <= toProcess_date).OrderByDescending(file => file.LastWriteTime);

                            string destPath = Path.Combine(DownloadDirectoryRP, "*");
                            foreach (RemoteFileInfo file in files)
                            {
                                                                
                                //MessageBox.Show(file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss"));
                                session.GetFiles(RemotePath.EscapeFileMask(file.FullName), destPath).Check();
                            }

                            //-------------------End Latest Files


                            ////try
                            ////{

                            ////    //transferOptions.TransferMode = TransferMode.Binary;
                            ////    //transferOptions.FileMask = ">2HS";
                            ////    //transferOptions.FileMask = "*.*>=2020-01-27 05:00:01 <=2020-01-27 06:00:00";
                            ////    //transferOptions.FileMask = "*>=" + date + "|*/";                                
                            ////    //TransferOptions transferOptions = new TransferOptions();
                            ////    //transferOptions.FileMask = "*<=" + DateTime.Today.ToString("yyyy-MM-dd");
                            ////    transferOptions.FileMask = "*<=" + DateTime.Today.ToString("yyyy-MM-dd HH:mm:ss") + "|>" + DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd HH:mm:ss");

                            ////    session.GetFiles(remoteFTPDirectory, DownloadDirectoryRP,false, transferOptions);

                            ////}
                            ////catch (Exception e)
                            ////{
                            ////    Dts.Events.FireError(0, null,
                            ////    string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                            ////    Dts.TaskResult = (int)DTSExecResult.Failure;
                            ////}


                        }
                    }


                                      
                }
            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                string.Format("Error when using WinSCP to download file: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
            }         


            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_9576024800b94840b9f3f9c229c168ea</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_9576024800b94840b9f3f9c229c168ea</msb:DisplayName>
    <msb:ProjectId>{D483EB8B-D797-4604-950E-5CA8D8DC3A71}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_9576024800b94840b9f3f9c229c168ea.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9576024800b94840b9f3f9c229c168ea")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_9576024800b94840b9f3f9c229c168ea")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9576024800b94840b9f3f9c229c168ea.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9576024800b94840b9f3f9c229c168ea.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_9576024800b94840b9f3f9c229c168ea.dll">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
BgDrAtsBBgD8AtsBBgAsAN8BNgCUAOgBFgABAN8BFgBvAOwBUCAAAAAAhgjYBfYBAQBYIAAAAACB
COEFiwABAGQgAAAAAIYAhgYGAAIADCUAAAAAhhhsBwYAAgAUJQAAAACDGGwHBgACABwlAAAAAJMI
IAf7AQIASCUAAAAAkwhPAgACAgBPJQAAAACTCFsCBgICAFclAAAAAJYIFgkNAgMAXiUAAAAAhhhs
BwYAAwBmJQAAAACRGHIHEgIDABQlAAAAAIYYbAcGAAMAdCUAAAAAgwAzABYCAwDIJQAAAACRGHIH
EgIEABQlAAAAAIYYbAcGAAQA1CUAAAAAgwAKABYCBADfJQAAAACDAHgAHAIFAAAAAQDVBAAAAQDV
BAAAAQC+AQAAAQC/AQAAAQC/AQkAbAcBABEAbAcGABkAbAcKACkAbAcQADEAbAcQADkAbAcQAEEA
bAcQAEkAbAcQAFEAbAcQAFkAbAcQAGEAbAcQAGkAbAcGAHkAbAcGAPEAbAcGABEBbAcVAHEAxghL
ACEBPghRACkBRwZXADEBuQReAOkABwViADEBwwReAEEBjABmAEEBaAZrAEEB6wFwAIkA4gJ2AEkB
bAcGAJEAbAd7AJkAbAcGAJkAZAGEAJkAOgaLAJkA3gEQAJkA0QEQAJkARwEQAJkAagiRAKkAbAcG
AKkAEAUQADkB9wiXAKkAPwUQAKkALgUQAKkAZwmdAKkAewajAKEA7gipAGEBVQmvAGEBXgezALEA
SQleAGkBRwa4AHEB5wi9AHEBkQnCAKkATAjJAAwAbAfgAJEBNQLmABQAbAfgAJEB2wQNAaEBKAKX
ABwAXgc2ASQASQlGAcEAxAFiAKkBWAVLAakAYQhQAbkBUgUGALEAcwlcAdEA2gIGACEB3AhgATkB
/ghmAcEBSAdsASEBIgkBAHEAbAcGAOkAbAcGAMkBrAF1AckBhAl+AfkAbAeEARkBbAcGAMEA9gF2
AIkABwWRAYkArwWWAYkAxQWWAcEAoQlcAQgAGAC5AQgAHAC+ASAAawC+ASEAawC+AS4ACwA4Ai4A
EwBBAi4AGwBgAi4AIwBpAi4AKwCSAi4AMwCSAi4AOwCSAi4AQwBpAi4ASwCYAi4AUwCSAi4AWwCv
AkAAawC+AUMAYwC+AUkAewBgAmMAcwC+AWkAewBgAoEAawC+AcMAawC+AeMAawC+ARwAjAECAAEA
AwACAAQABAAAAOUFIwIAACQHKAIAAG8CLQIAABoJMwICAAEAAwABAAIAAwACAAYABQACAAcABwAB
AAgABwACAAkACQDYAAQBLgE/AQSAAAABAAAAwRwRZAAAAAAAANkAAAAEAAAAAAAAAAAAAACeAQkB
AAAAAA4AAAAAAAAAAAAAAKcBZwUAAAAAAQAGAAUAVycAAAAAsAEMCQAAAAAEAAAAAAAAAAAAAACe
Af0AAAAAAAQAAAAAAAAAAAAAAJ4BUAYAAAAADgAAAAAAAAAAAAAApwGyAAAAAAAEAAAAAAAAAAAA
AACeATsCAAAAAAAAAAABAAAAvQcAAAUAAgAGAAIABwACAGcA/wBrACcBAAAAPD45X180XzAAPE1h
aW4+Yl9fNF8wADw+Y19fRGlzcGxheUNsYXNzNF8wADw+OV9fMQA8TWFpbj5iX18xAElFbnVtZXJh
YmxlYDEASU9yZGVyZWRFbnVtZXJhYmxlYDEASUVudW1lcmF0b3JgMQA8PjlfXzRfMgA8TWFpbj5i
X180XzIARnVuY2AyAFRvSW50MTYAPD45ADxNb2R1bGU+AFN5c3RlbS5JTwBXaW5TQ1AATWljcm9z
b2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU1RfOTU3NjAyNDgwMGI5NDg0MGI5ZjNm
OWMyMjljMTY4ZWEAU3lzdGVtLkRhdGEAbXNjb3JsaWIAPD5jAFN5c3RlbS5Db2xsZWN0aW9ucy5H
ZW5lcmljADxwdGNsPmtfX0JhY2tpbmdGaWVsZABzZXRfUGFzc3dvcmQAZGVmYXVsdEluc3RhbmNl
AHNldF9GdHBNb2RlAERhdGFUYWJsZQBWYXJpYWJsZQBFbnVtZXJhYmxlAElEaXNwb3NhYmxlAFJ1
bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAHNmaWxlAGdldF9GdWxsTmFtZQBzZXRf
VXNlck5hbWUAc2V0X0hvc3ROYW1lAFRvRGF0ZVRpbWUAZ2V0X0xhc3RXcml0ZVRpbWUATWljcm9z
b2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBDb21iaW5lAFR5cGUAV2hlcmUAU3lzdGVtLkNvcmUA
RmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9u
U2V0dGluZ3NCYXNlAE9wZXJhdGlvblJlc3VsdEJhc2UARGlzcG9zZQBnZXRfRGF0ZQBmcm9tUHJv
Y2Vzc19kYXRlAHRvUHJvY2Vzc19kYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2Vu
ZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0
dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBB
c3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1i
bHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29t
cGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNz
ZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRl
AEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBn
ZXRfVmFsdWUAR2V0U2Vuc2l0aXZlVmFsdWUAdmFsdWUAT3JkZXJCeURlc2NlbmRpbmcAU3lzdGVt
LlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBzZXRfRXhlY3V0YWJsZVBhdGgAUmVtb3RlUGF0
aABzZXRfRGVidWdMb2dQYXRoAHNldF9TZXNzaW9uTG9nUGF0aABDaGVjawBFc2NhcGVGaWxlTWFz
awBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
VGFza3MuU2NyaXB0VGFzawBvcF9HcmVhdGVyVGhhbk9yRXF1YWwAb3BfTGVzc1RoYW5PckVxdWFs
AGdldF9wdGNsAHNldF9wdGNsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2Rl
bABTVF85NTc2MDI0ODAwYjk0ODQwYjlmM2Y5YzIyOWMxNjhlYS5kbGwAc2V0X1Byb3RvY29sAGdl
dF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAFRvQm9vbGVhbgBUaW1lU3BhbgBPcGVuAFNj
cmlwdE1haW4AU2Vzc2lvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlv
bgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBFeGNlcHRpb24AUmVtb3RlRmls
ZUluZm8AQ3VsdHVyZUluZm8ARGlyZWN0b3J5SW5mbwBTeXN0ZW0uTGlucQBnZXRfUmVzb3VyY2VN
YW5hZ2VyAEV2ZW50c09iamVjdFdyYXBwZXIARmlyZUVycm9yAElFbnVtZXJhdG9yAEdldEVudW1l
cmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21w
aWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfOTU3NjAyNDgwMGI5NDg0MGI5ZjNmOWMy
MjljMTY4ZWEuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNU
Xzk1NzYwMjQ4MDBiOTQ4NDBiOWYzZjljMjI5YzE2OGVhLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxl
cwBFbnVtZXJhdGVSZW1vdGVGaWxlcwBHZXRGaWxlcwBBZGRSYXdTZXR0aW5ncwBTeXN0ZW0uQ29s
bGVjdGlvbnMAU2Vzc2lvbk9wdGlvbnMARW51bWVyYXRpb25PcHRpb25zAFRyYW5zZmVyT3B0aW9u
cwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBnZXRfUm93
cwBDb25jYXQARm9ybWF0AE9iamVjdABXaW5TQ1BuZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1
bHQAVHJhbnNmZXJPcGVyYXRpb25SZXN1bHQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AENvbnZlcnQA
c2V0X1RpbWVvdXQATW92ZU5leHQARGF0YVJvdwBnZXRfQXNzZW1ibHkAQ3JlYXRlRGlyZWN0b3J5
AGdldF9Jc0RpcmVjdG9yeQAAAAAAPyQAUABhAGMAawBhAGcAZQA6ADoAcABXAGkAbgBTAGMAcABF
AHgAZQBjAHUAdABhAGIAbABlAFAAYQB0AGgAACckAFAAYQBjAGsAYQBnAGUAOgA6AHAASABvAHMA
dABOAGEAbQBlAAAnJABQAGEAYwBrAGEAZwBlADoAOgBwAFUAcwBlAHIATgBhAG0AZQAAJyQAUABh
AGMAawBhAGcAZQA6ADoAcABQAGEAcwBzAHcAbwByAGQAAB8kAFAAYQBjAGsAYQBnAGUAOgA6AHAA
UABvAHIAdAAAKSQAUABhAGMAawBhAGcAZQA6ADoAcAB3AGkAbgBTAEMAUABMAG8AZwAAMSQAUABh
AGMAawBhAGcAZQA6ADoAcAB3AGkAbgBTAEMAUABMAG8AZwBQAGEAdABoAAAfQwB1AHMAdABJAG4A
cAB1AHQARgBvAGwAZABlAHIAABNQAHIAbwBjAGUAcwBzAEQAVAAAIWYAcgBvAG0AUAByAG8AYwBl
AHMAcwBfAGQAYQB0AGUAAB10AG8AUAByAG8AYwBlAHMAcwBfAGQAYQB0AGUAACUkAFAAYQBjAGsA
YQBnAGUAOgA6AHAARgBUAFAARgBsAGEAZwAAH0YAdABwAFAAaQBuAGcASQBuAHQAZQByAHYAYQBs
AAAFNgAwAAAxVQBzAGUAcgA6ADoAdgBGAG8AbABkAGUAcgBzAEwAaQBzAHQAcwBmAG8AcgBEAEwA
AC1XAGkAbgBzAGMAcABTAGUAcwBzAGkAbwBuAEwAbwBnAEQATAAuAHQAeAB0AAApVwBpAG4AcwBj
AHAARABlAGIAdQBnAEwAbwBnAEQATAAuAHQAeAB0AAAZTABvAGMAYQBsAEQAaQByAFAAYQB0AGgA
ABVGAG8AbABkAGUAcgBOAGEAbQBlAAAHKgAuACoAAAMqAABbRQByAHIAbwByACAAdwBoAGUAbgAg
AHUAcwBpAG4AZwAgAFcAaQBuAFMAQwBQACAAdABvACAAZABvAHcAbgBsAG8AYQBkACAAZgBpAGwA
ZQA6ACAAewAwAH0AAHFTAFQAXwA5ADUANwA2ADAAMgA0ADgAMAAwAGIAOQA0ADgANAAwAGIAOQBm
ADMAZgA5AGMAMgAyADkAYwAxADYAOABlAGEALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMA
bwB1AHIAYwBlAHMAACd5AHkAeQB5AC0ATQBNAC0AZABkACAASABIADoAbQBtADoAcwBzAAEAAAC8
AA/sroguR4W5eHpmvO7fAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAhS4HFhIYDg4ODgIODg4R
RRFJEk0RRRJRElUSWQ4VEl0CEmECFRJlARJhEmESaRJtBSAAEoCRBSAAEoCVBiABEoCZHAMgABwD
IAAOBAABBg4EAAECHAUAARFFDgQgABFFCCAFAQgICAgIBiABARGAqQUgAQERQQUgAgEODgUAAg4O
DgUgAQERSQUgAQESTQUgABKArQMgAAgEIAASWQQgARwOBAABAg4GAAESgL0ODiADFRKAwQESYQ4O
EYDFBxUSXQISYQIFIAIBHBgYEAECFRKAwQEeABUSgMEBHgAVEl0CHgACBAoBEmEIFRJdAhJhEUUZ
EAICFRKAzQEeABUSgMEBHgAVEl0CHgAeAQYKAhJhEUUHFRKAwQESYQggABUSZQETAAYVEmUBEmEE
IAATAAQAAQ4OCyAEEoDZDg4CEoClAyAAAgUgABKA4QUAAg4OHAggBQIIDg4OCAgAARKA5RGA6QUg
ABKA7QcgAgEOEoDtBAcBEUUEIAEODgcAAgIRRRFFCLd6XFYZNOCJCImEXc2AgMyRCCJx7Eo8VtC/
BAAAAAAEAQAAAAMGEUEDBhJ9BAYSgIEDBhIQAgYIAwYRFAMGEUUIBhUSXQISYQIDBhIcCQYVEl0C
EmERRQQgABFBBAAAEn0FAAASgIEGAAEBEoCBBAAAEhADAAABBSABAhJhBiABEUUSYQQoABFBBAgA
En0FCAASgIEECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQAC
AAAAAAAoAQAjU1RfOTU3NjAyNDgwMGI5NDg0MGI5ZjNmOWMyMjljMTY4ZWEAAAUBAAAAABYBABFD
b3B5cmlnaHQgQCAgMjAyMAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFt
ZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5
c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAs
IEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0u
UmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAApD4AAAAA
AAAAAAAAvj4AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAALA+AAAAAAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAEWTBHAAAAQARZMEcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQA
XwA5ADUANwA2ADAAMgA0ADgAMAAwAGIAOQA0ADgANAAwAGIAOQBmADMAZgA5AGMAMgAyADkAYwAx
ADYAOABlAGEAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAzADYA
MQAuADIANQA2ADEANwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA5
ADUANwA2ADAAMgA0ADgAMAAwAGIAOQA0ADgANAAwAGIAOQBmADMAZgA5AGMAMgAyADkAYwAxADYA
OABlAGEALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBw
AHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUA
bQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAA
AFMAVABfADkANQA3ADYAMAAyADQAOAAwADAAYgA5ADQAOAA0ADAAYgA5AGYAMwBmADkAYwAyADIA
OQBjADEANgA4AGUAYQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABT
AFQAXwA5ADUANwA2ADAAMgA0ADgAMAAwAGIAOQA0ADgANAAwAGIAOQBmADMAZgA5AGMAMgAyADkA
YwAxADYAOABlAGEAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADcAMwA2ADEALgAyADUANgAxADcAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMA
aQBvAG4AAAAxAC4AMAAuADcAMwA2ADEALgAyADUANgAxADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA0D4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\GetDirectoryListsFromFTPServerByCustomer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{C15A58F2-BC7F-4A5E-8201-DC4027259EFB}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="GetDirectoryListsFromFTPServerByCustomer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_0e1c927ce39f433e94e7770fcbba2c05"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::CustInputFolder,User::CustomerID,User::CustomerLists,User::CustSC,User::ProcessDT,$Package::pCurHour,$Package::pDownloadDirectory,$Package::pFTPFlag,$Package::pHostName,$Package::pPassword,$Package::pPort,$Package::pProcessHour,$Package::pProcessingMinutes,$Package::pRemotePath,$Package::pUserName,$Package::pWinScpExecutablePath,$Package::pwinSCPLog,$Package::pwinSCPLogPath"
              ReadWriteVariables="User::fromProcess_date,User::toProcess_date,User::vFolderLists">
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[
#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using WinSCP;
using System.Collections.Generic;
using System.Collections;
using System.IO;
using System.Globalization;
using System.Linq;
#endregion

namespace ScrCallWinScp
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        public Protocol ptcl { get; private set; }

        public DateTime Process_date;
        public DateTime fromProcess_date;
        public DateTime toProcess_date;

        public void Main()
        {


            //String remoteFTPDirectory = Dts.Variables["$Package::pRemotePath"].Value.ToString();
            String winscpPath = Dts.Variables["$Package::pWinScpExecutablePath"].Value.ToString();
            String ftpSite = (string)Dts.Variables["$Package::pHostName"].Value.ToString();
            String username = (string)Dts.Variables["$Package::pUserName"].GetSensitiveValue();
            String password = (string)Dts.Variables["$Package::pPassword"].GetSensitiveValue();
            int PortNumber = Convert.ToInt16(Dts.Variables["$Package::pPort"].Value.ToString());
            Boolean winSCPLog = Convert.ToBoolean(Dts.Variables["$Package::pwinSCPLog"].Value);
            String winSCPLogPath = Dts.Variables["$Package::pwinSCPLogPath"].Value.ToString();
            String DownloadDirectory = Dts.Variables["$Package::pDownloadDirectory"].Value.ToString();
            String Cust_Code= Dts.Variables["CustomerID"].Value.ToString();
            String Cust_SC = Dts.Variables["CustSC"].Value.ToString();
            Process_date = Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString());

            String CustInputFolder = Dts.Variables["CustInputFolder"].Value.ToString();

            String DownloadDirectoryRP;
            String LocalDirPath;
            int noOfFiles;

      
            Boolean sFTP = Convert.ToBoolean(Dts.Variables["$Package::pFTPFlag"].Value);
            if (sFTP)
            {
                ptcl = Protocol.Sftp;
            }
            else
            {
                ptcl = Protocol.Ftp;
            }
            //string sshKey = Dts.Variables["sshKey"].Value.ToString();

            TimeSpan span = new TimeSpan(0, 0, 2, 0, 0);

            
            //------------------------------------------------------------------------STart Process Hour

            int ProcessHOur = Convert.ToInt32(Dts.Variables["$Package::pProcessHour"].Value.ToString());
            Boolean CurHour = Convert.ToBoolean(Dts.Variables["$Package::pCurHour"].Value);            
            DateTime pProcessDate = Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Date;
            int ProcessingMinutes = Convert.ToInt32(Dts.Variables["$Package::pProcessingMinutes"].Value.ToString());

            TimeSpan fromtime = new TimeSpan();
            TimeSpan totime = new TimeSpan();
            fromProcess_date = pProcessDate;
            toProcess_date = pProcessDate;
            
            if (CurHour)
            {
                ////fromtime = new TimeSpan(Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Hour-1, Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Minute, 0);
                ////totime =  new TimeSpan(Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Hour, Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Minute, 0);
                fromtime = new TimeSpan(0, ProcessingMinutes, 0);
                totime = new TimeSpan(Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Hour, Convert.ToDateTime(Dts.Variables["ProcessDT"].Value.ToString()).Minute, 0);
                fromtime = totime.Subtract(fromtime);
            }
            else
            {
                switch (ProcessHOur)
                {
                    case 1:
                        fromtime = new TimeSpan(0, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        //fromProcess_date = fromProcess_date.Add(fromtime);
                        //toProcess_date = toProcess_date.Add(totime);
                        ////fromProcess_date = fromProcess_date.AddHours(-ProcessHOur); //Convert.ToDateTime(pProcessDate.Date. (-ProcessHOur).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture));
                        ////toProcess_date = toProcess_date.AddHours(ProcessHOur);//Convert.ToDateTime(DateTime.Now.AddHours(-23).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture));
                        break;
                    case 2:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 3:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 4:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 6:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 7:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 8:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 9:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 10:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 11:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 12:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 13:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 14:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 15:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 16:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 17:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 18:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 19:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 20:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 21:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 22:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 23:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                    case 24:
                        fromtime = new TimeSpan(ProcessHOur - 1, 0, 0);
                        totime = new TimeSpan(ProcessHOur, 0, 0);
                        break;
                        //default:
                        //    Console.WriteLine("Default case");
                        //    break;
                }
            }

            fromProcess_date = fromProcess_date.Add(fromtime);
            toProcess_date = toProcess_date.Add(totime);

            Dts.Variables["fromProcess_date"].Value = fromProcess_date;
            Dts.Variables["toProcess_date"].Value = toProcess_date;

            //------------------------------------------------------------------------END Process Hour



            // Setup session options
            SessionOptions sessionOptions = new SessionOptions
            {
                FtpMode = FtpMode.Passive,
                Protocol = ptcl,       // Can be SFTP, FTPS, or plain FTP
                HostName = ftpSite,
                UserName = username,
                Password = password,
                TimeoutInMilliseconds = 60000,
                //GiveUpSecurityAndAcceptAnySshHostKey = true
            };

            sessionOptions.AddRawSettings("PingIntervalSecs", "60");///PingIntervalSecs//FtpPingInterval


            //////// Set up the FTP session, specifying the path to the server directory
            //////Session session = new Session
            //////{
            //////    ExecutablePath = winscpPath
            //////};


            //////// Connect
            //////session.Open(sessionOptions);


            //////// The following is used to set up a DataTable object that will store the list of files/folders retrieved from the FTP server.
            //////DataTable dt = new DataTable();
            //////////dt.Columns.Add("FileName", typeof(String));
            //////////dt.Columns.Add("ModifiedDate", typeof(DateTime));
            //////dt.Columns.Add("fType", typeof(String));
            //////dt.Columns.Add("FolderName", typeof(String));    ///---DirPath
            //////dt.Columns.Add("FolderModifiedDate", typeof(DateTime));
            //////dt.Columns.Add("Cust_Code", typeof(String));
            //////dt.Columns.Add("Process_date", typeof(DateTime));
            //////dt.Columns.Add("LocalDirPath", typeof(String));
            //////dt.Columns.Add("NoOfFiles", typeof(int));
            //////dt.Columns.Add("ProcessingTime", typeof(int));
            //////dt.Columns.Add("ProcessingHour", typeof(int));



            //////// Specify which directory on the FTP server to list
            ///////// RemoteDirectoryInfo directory = session.ListDirectory(Dts.Variables["$Package::pRemotePath"].Value.ToString());

            //////IEnumerable<RemoteFileInfo> fileInfos = session.EnumerateRemoteFiles(CustInputFolder, null,EnumerationOptions.EnumerateDirectories | EnumerationOptions.AllDirectories);


            /////////foreach (RemoteFileInfo fileInfo in directory.Files)
            //////foreach (RemoteFileInfo fileInfo in fileInfos)
            //////{
            //////    if (fileInfo.IsDirectory)
            //////    {
            //////        // For each file found, add a new row to the DataTable object created above
            //////        noOfFiles=FilesCount(session, fileInfo);

            //////        ////LocalDirPath =  RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectory);
            //////        DownloadDirectoryRP = Path.Combine(DownloadDirectory, Cust_SC + "_" + Process_date.ToString("yyyy_MM_dd", CultureInfo.InvariantCulture));//String.Format(Process_date.ToShortDateString(),"yyy-dd-mm")                    

            //////        LocalDirPath = RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectoryRP);

            //////        DataRow dr = dt.NewRow();
            //////        dr["FolderName"] = fileInfo.FullName;
            //////        dr["FolderModifiedDate"] = fileInfo.LastWriteTime;
            //////        dr["fType"] = fileInfo.FileType;
            //////        dr["Cust_Code"] = Cust_Code;
            //////        dr["Process_date"] = Process_date;
            //////        dr["LocalDirPath"] = LocalDirPath;
            //////        dr["NoOfFiles"] = noOfFiles;
            //////        dr["ProcessingTime"] = ProcessingMinutes;
            //////        dr["ProcessingHour"] = ProcessHOur;
            //////        dt.Rows.Add(dr);
            //////    }
            //////}

            //////// After all of the files have been added to the DataTable object, set the SSIS variable vFileList
            ////////  to the value of that DataTable object.
            //////Dts.Variables["vFolderLists"].Value = dt;


            //////Dts.TaskResult = (int)ScriptResults.Success;
            ///


            using (Session session = new Session())
            {
                session.ExecutablePath = winscpPath;
                // Connect
                session.Open(sessionOptions);

                ////////////////////////////////////////////// Your code
                // The following is used to set up a DataTable object that will store the list of files/folders retrieved from the FTP server.
                DataTable dt = new DataTable();
                dt.Columns.Add("fType", typeof(String));
                dt.Columns.Add("FolderName", typeof(String));    ///---DirPath
                dt.Columns.Add("FolderModifiedDate", typeof(DateTime));
                dt.Columns.Add("Cust_Code", typeof(String));
                dt.Columns.Add("Process_date", typeof(DateTime));
                dt.Columns.Add("LocalDirPath", typeof(String));
                dt.Columns.Add("NoOfFiles", typeof(int));
                dt.Columns.Add("ProcessingTime", typeof(int));
                dt.Columns.Add("ProcessingHour", typeof(int));


                //// Specify which directory on the FTP server to list
                // RemoteDirectoryInfo directory = session.ListDirectory(Dts.Variables["$Package::pRemotePath"].Value.ToString());
                IEnumerable<RemoteFileInfo> fileInfos = session.EnumerateRemoteFiles(CustInputFolder, null, EnumerationOptions.EnumerateDirectories | EnumerationOptions.AllDirectories);


                ///foreach (RemoteFileInfo fileInfo in directory.Files)
                foreach (RemoteFileInfo fileInfo in fileInfos)
                {
                    if (fileInfo.IsDirectory)
                    {
                        // For each file found, add a new row to the DataTable object created above
                        noOfFiles = FilesCount(session, fileInfo);

                        ////LocalDirPath =  RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectory);
                        DownloadDirectoryRP = Path.Combine(DownloadDirectory, Cust_SC + "_" + Process_date.ToString("yyyy_MM_dd", CultureInfo.InvariantCulture));//String.Format(Process_date.ToShortDateString(),"yyy-dd-mm")                    

                        LocalDirPath = RemotePath.TranslateRemotePathToLocal(fileInfo.FullName, CustInputFolder, DownloadDirectoryRP);

                        DataRow dr = dt.NewRow();
                        dr["FolderName"] = fileInfo.FullName;
                        dr["FolderModifiedDate"] = fileInfo.LastWriteTime;
                        dr["fType"] = fileInfo.FileType;
                        dr["Cust_Code"] = Cust_Code;
                        dr["Process_date"] = Process_date;
                        dr["LocalDirPath"] = LocalDirPath;
                        dr["NoOfFiles"] = noOfFiles;
                        dr["ProcessingTime"] = ProcessingMinutes;
                        dr["ProcessingHour"] = ProcessHOur;
                        dt.Rows.Add(dr);
                    }
                }

                // After all of the files have been added to the DataTable object, set the SSIS variable vFileList
                //  to the value of that DataTable object.
                Dts.Variables["vFolderLists"].Value = dt;


                Dts.TaskResult = (int)ScriptResults.Success;

            }
        }

        private  int FilesCount(Session session, RemoteFileInfo fileInfo)
        {
            ////List<string> filestc =
            int filescount =
                session.EnumerateRemoteFiles(
                    fileInfo.FullName, "*.*", EnumerationOptions.AllDirectories)                    
                    .Where(fi => Convert.ToDateTime(fi.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date & Convert.ToDateTime(fi.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) <= toProcess_date)                 
                    //.Where(fi => fi.LastWriteTime.Date == Process_date.Date)
                    //Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date
                    //IEnumerable<RemoteFileInfo> files = session.EnumerateRemoteFiles(remoteFTPDirectory, "*.*", EnumerationOptions.None).Where(file => !file.IsDirectory).Where(sfile => Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) >= fromProcess_date & Convert.ToDateTime(sfile.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")) <= toProcess_date);                 
                    //.Select(fi => fi.FullName)
                    .ToList().Count();
            return filescount;            
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Settings.get_Default():ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Sett" +
    "ings")]

namespace ST_0e1c927ce39f433e94e7770fcbba2c05.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_0e1c927ce39f433e94e7770fcbba2c05.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{AAB0A90C-B6A2-40F8-B009-E33D7722B331}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_0e1c927ce39f433e94e7770fcbba2c05</RootNamespace>
    <AssemblyName>ScrCallWinScp</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="WinSCPnet, Version=1.6.5.10071, Culture=neutral, PublicKeyToken=2271ec4a3c56d0bf, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\WinSCP\WinSCPnet.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_0e1c927ce39f433e94e7770fcbba2c05</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_0e1c927ce39f433e94e7770fcbba2c05</msb:DisplayName>
    <msb:ProjectId>{00E96559-F1FD-4888-B686-2A8E90DD2BA5}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_0e1c927ce39f433e94e7770fcbba2c05.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0e1c927ce39f433e94e7770fcbba2c05")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_0e1c927ce39f433e94e7770fcbba2c05")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0e1c927ce39f433e94e7770fcbba2c05.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0e1c927ce39f433e94e7770fcbba2c05.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ScrCallWinScp.dll">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
YQASAAIBjwAGACIApAAOAF4GYQASANkIjwAGAKwFpQUGALUC9QYGAH4IpQUGALUGQgcGAHYGEAYW
AIUCXgUWAOYCXgUWADwC+wUKAEwFzQQaANgHlAEaAAwBlAEGAIYEpQUGAMEIpQUOAPoAYQASADcG
jwAGAMQBpQUGACwBpQUSAOAFjwAGADkApQUGABQApAAOADQIYQAGAKEGpQUGAKYEVwAOAKAEYQAG
AJwGpQUSAEwGjwAGAMUGEggGACABpQUGAD8ApQUeABUBkAYGADAApAAGAOwIJQYAAAAATgAAAAAA
AQABAAEAEADVBYIGOQABAAEAAAAQAEkHpQdtAAUABwAAARAA/QelB4EABwALAAMBAABXCAAAZQAI
AA4AAQDDAMcBBgB4AssBBgBlAssBBgB2AssBEQCxBc8BEQD7AdMBEQDmANcBBgaHANsBVoBHCN4B
VoDbAd4BUCAAAAAAhgg6BeIBAQBYIAAAAACBCEMFpgABAGQgAAAAAIYA2wUGAAIABCoAAAAAgQC2
COcBAgAzKgAAAACGGN8GBgAEADwqAAAAAIEAAQDvAQQAkCoAAAAAgxjfBgYABQCYKgAAAACTCLEG
9QEFAMQqAAAAAJMI4wEBAQUAyyoAAAAAkwjvAfoBBQDTKgAAAACWCI8IAAIGANoqAAAAAIYY3wYG
AAYA4ioAAAAAkRjlBgUCBgAAAAEAZAQAAAEA8wUAAAIAbQYAAAEAqwQAAAEAZAQJAN8GAQARAN8G
BgAZAN8GCgApAN8GEAAxAN8GEAA5AN8GEABBAN8GEABJAN8GEABRAN8GEABZAN8GEABhAN8GEABp
AN8GBgB5AN8GBgDRAN8GBgD5AN8GFQBxAE8IQwAJAdQHSQARAZMFTwAZAT4EVgDZAIQEWgAZAVIE
VgApAUYAXgApAb0FYwApAXcBaACRAN8GbgApATcAdwCJAFwCfACRAN8GgQCJAOwGiACJADMEiACR
AHUIjACJAL8AkwAZAUgEmgCZAN8GBgCZAPYAnwCZAIYFpgCZAGoBEACZAF0BEACZANkAEACZAAgH
AQCZAPcHrAChAN8GBgChAI0EEAChANAFsgCpAN8GBgCpAAYIuABBAT4BvgA5Ab8AxwChAOIH0QAM
ANEG6AAUAKoI+AC5APUI/QDpAAsCAQGJAIQEBgEhAW4IDgF5AbQBFQG5AFABWgCBAfYEDgGpAOEI
GwHBAJwFIAG5AIIBfAC5ALwBJgGpAGUIKgGRAb8AMAGZAdAI/QChAVQCBgAJAZsIAQAcAN8GPwGx
AckBRQGxAckIZAGxAbsIdgFxAN8GBgCJAIQEhwGJABEFjAGJACcFjAHZAN8GBgBBAegIlAHhAN8G
mgEBAd8GBgAIACQAvQEIACgAwgEgAGsAwgEhAGsAwgEuAAsAHQIuABMAJgIuABsARQIuACMATgIu
ACsAdwIuADMAdwIuADsAdwIuAEMATgIuAEsAfQIuAFMAdwIuAFsAlAJAAGsAwgFDAGMAwgFJAHsA
RQJjAHMAwgFpAHsARQLAAGsAwgHhAGsAwgEbAIIBAgABAAMAAgAEAAQAAABHBQkCAAC1Bg4CAAAY
AhMCAACTCBgCAgABAAMAAQACAAMAAgAIAAUAAgAJAAcAAQAKAAcAAgALAAkA4ADxADYBBIAAAAEA
AADBHPZjAAAAAAAAggYAAAQAAAAAAAAAAAAAAKIBmwAAAAAADgAAAAAAAAAAAAAAqwGuBAAAAAAB
AAYABQBXJwAAAAC0AYUIAAAAAAQAAAAAAAAAAAAAAKIBjwAAAAAABAAAAAAAAAAAAAAAogGlBQAA
AAAOAAAAAAAAAAAAAACrAWgAAAAAAAQAAAAAAAAAAAAAAKIBzwEAAAAAAAAAAAEAAABTBwAABQAC
AIsAXwGNAF8BjwBfAQAAADxGaWxlc0NvdW50PmJfXzhfMABJRW51bWVyYWJsZWAxAElFbnVtZXJh
dG9yYDEATGlzdGAxAFRvSW50MzIARnVuY2AyAFRvSW50MTYAPE1vZHVsZT4AU3lzdGVtLklPAFdp
blNDUABNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBt
c2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBBZGQAPHB0Y2w+a19fQmFja2luZ0Zp
ZWxkAHNldF9QYXNzd29yZABkZWZhdWx0SW5zdGFuY2UAc2V0X0Z0cE1vZGUARGF0YVRhYmxlAFZh
cmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZy
b21IYW5kbGUAZ2V0X0Z1bGxOYW1lAHNldF9Vc2VyTmFtZQBzZXRfSG9zdE5hbWUAVG9EYXRlVGlt
ZQBnZXRfTGFzdFdyaXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAENvbWJp
bmUAZ2V0X0ZpbGVUeXBlAFdoZXJlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0
X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAGdldF9JbnZhcmlhbnRDdWx0dXJlAFZTVEFSVFNjcmlw
dE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAGdldF9EYXRl
AGZyb21Qcm9jZXNzX2RhdGUAdG9Qcm9jZXNzX2RhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29t
cGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1
Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0
ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJp
YnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRB
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAGdldF9NaW51dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQBHZXRTZW5zaXRpdmVWYWx1ZQB2
YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAHNldF9FeGVjdXRhYmxlUGF0
aABSZW1vdGVQYXRoAGZpAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFRyYW5zbGF0ZVJlbW90ZVBhdGhUb0xvY2Fs
AG9wX0dyZWF0ZXJUaGFuT3JFcXVhbABvcF9MZXNzVGhhbk9yRXF1YWwAZ2V0X3B0Y2wAc2V0X3B0
Y2wAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNjckNhbGxXaW5TY3Au
ZGxsAHNldF9Qcm90b2NvbABnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1h
bgBUb0Jvb2xlYW4AVGltZVNwYW4AT3BlbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU2Vzc2lvbgBz
ZXNzaW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5S
ZWZsZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAFJlbW90ZUZp
bGVJbmZvAGZpbGVJbmZvAEN1bHR1cmVJbmZvAFNjckNhbGxXaW5TY3AAU3lzdGVtLkxpbnEAQ2hh
cgBJRm9ybWF0UHJvdmlkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBJRW51bWVyYXRvcgBHZXRFbnVt
ZXJhdG9yAC5jdG9yAC5jY3RvcgBnZXRfSG91cgBTeXN0ZW0uRGlhZ25vc3RpY3MAc2V0X1RpbWVv
dXRJbk1pbGxpc2Vjb25kcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5S
ZXNvdXJjZXMAU1RfMGUxYzkyN2NlMzlmNDMzZTk0ZTc3NzBmY2JiYTJjMDUuUHJvcGVydGllcy5S
ZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzBlMWM5MjdjZTM5ZjQzM2U5NGU3
NzcwZmNiYmEyYzA1LlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBFbnVtZXJhdGVSZW1vdGVGaWxl
cwBBZGRSYXdTZXR0aW5ncwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAU2Vzc2lvbk9w
dGlvbnMARW51bWVyYXRpb25PcHRpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAGdl
dF9Sb3dzAENvbmNhdABTdWJ0cmFjdABPYmplY3QAV2luU0NQbmV0AGdldF9EZWZhdWx0AHNldF9U
YXNrUmVzdWx0AGdldF9DdXJyZW50AEZpbGVzQ291bnQAQ29udmVydABUb0xpc3QATW92ZU5leHQA
RGF0YVJvdwBOZXdSb3cAZ2V0X0Fzc2VtYmx5AGdldF9Jc0RpcmVjdG9yeQAAAAAAPyQAUABhAGMA
awBhAGcAZQA6ADoAcABXAGkAbgBTAGMAcABFAHgAZQBjAHUAdABhAGIAbABlAFAAYQB0AGgAACck
AFAAYQBjAGsAYQBnAGUAOgA6AHAASABvAHMAdABOAGEAbQBlAAAnJABQAGEAYwBrAGEAZwBlADoA
OgBwAFUAcwBlAHIATgBhAG0AZQAAJyQAUABhAGMAawBhAGcAZQA6ADoAcABQAGEAcwBzAHcAbwBy
AGQAAB8kAFAAYQBjAGsAYQBnAGUAOgA6AHAAUABvAHIAdAAAKSQAUABhAGMAawBhAGcAZQA6ADoA
cAB3AGkAbgBTAEMAUABMAG8AZwAAMSQAUABhAGMAawBhAGcAZQA6ADoAcAB3AGkAbgBTAEMAUABM
AG8AZwBQAGEAdABoAAA5JABQAGEAYwBrAGEAZwBlADoAOgBwAEQAbwB3AG4AbABvAGEAZABEAGkA
cgBlAGMAdABvAHIAeQAAFUMAdQBzAHQAbwBtAGUAcgBJAEQAAA1DAHUAcwB0AFMAQwAAE1AAcgBv
AGMAZQBzAHMARABUAAAfQwB1AHMAdABJAG4AcAB1AHQARgBvAGwAZABlAHIAACUkAFAAYQBjAGsA
YQBnAGUAOgA6AHAARgBUAFAARgBsAGEAZwAALSQAUABhAGMAawBhAGcAZQA6ADoAcABQAHIAbwBj
AGUAcwBzAEgAbwB1AHIAACUkAFAAYQBjAGsAYQBnAGUAOgA6AHAAQwB1AHIASABvAHUAcgAAOSQA
UABhAGMAawBhAGcAZQA6ADoAcABQAHIAbwBjAGUAcwBzAGkAbgBnAE0AaQBuAHUAdABlAHMAACFm
AHIAbwBtAFAAcgBvAGMAZQBzAHMAXwBkAGEAdABlAAAddABvAFAAcgBvAGMAZQBzAHMAXwBkAGEA
dABlAAAhUABpAG4AZwBJAG4AdABlAHIAdgBhAGwAUwBlAGMAcwAABTYAMAAAC2YAVAB5AHAAZQAA
FUYAbwBsAGQAZQByAE4AYQBtAGUAACVGAG8AbABkAGUAcgBNAG8AZABpAGYAaQBlAGQARABhAHQA
ZQAAE0MAdQBzAHQAXwBDAG8AZABlAAAZUAByAG8AYwBlAHMAcwBfAGQAYQB0AGUAABlMAG8AYwBh
AGwARABpAHIAUABhAHQAaAAAE04AbwBPAGYARgBpAGwAZQBzAAAdUAByAG8AYwBlAHMAcwBpAG4A
ZwBUAGkAbQBlAAAdUAByAG8AYwBlAHMAcwBpAG4AZwBIAG8AdQByAAADXwAAFXkAeQB5AHkAXwBN
AE0AXwBkAGQAABl2AEYAbwBsAGQAZQByAEwAaQBzAHQAcwAAByoALgAqAAAneQB5AHkAeQAtAE0A
TQAtAGQAZAAgAEgASAA6AG0AbQA6AHMAcwABcVMAVABfADAAZQAxAGMAOQAyADcAYwBlADMAOQBm
ADQAMwAzAGUAOQA0AGUANwA3ADcAMABmAGMAYgBiAGEAMgBjADAANQAuAFAAcgBvAHAAZQByAHQA
aQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAAa/hYruiW5EeznPCtFAkmtwAEIAEBCAMgAAEF
IAEBEREEIAEBDgUgAQEReScHFw4ODg4ODg4ODg4ICBFFCBFJEUkSTRFFElESVRUSWQESXRJdEmEF
IAASgIUFIAASgIkGIAESgI0cAyAAHAMgAA4EAAEGDgQAAQIcBQABEUUOCCAFAQgICAgIBAABCA4E
IAARRQYgAwEICAgDIAAIBiABEUkRSQYgARFFEUkEIAEBHAYgAQERgJkFIAEBEUEFIAIBDg4FIAEB
Ek0FIAASgJ0IAAESgKERgKUJIAISgKkOEoChDiADFRKAsQESXQ4OEYC1BxUSgLEBEl0IIAAVElkB
EwAGFRJZARJdBCAAEwADIAACBAAAEnUHIAIODhKAuQYAAw4ODg4FAAIODg4EIAASYQUgAgEOHAMg
AAMFIAASgMkFIAEBEmEIFRKA1QISXQIFIAIBHBgZEAECFRKAsQEeABUSgLEBHgAVEoDVAh4AAgQK
ARJdERABARUSgN0BHgAVEoCxAR4ACxABAQgVEoCxAR4ABAcBEUUEIAEODgcAAgIRRRFFBSAAEoDh
ByACAQ4SgOEIt3pcVhk04IkIiYRdzYCAzJEIInHsSjxW0L8EAAAAAAQBAAAAAwYRQQMGEUUDBhJx
AwYSdQMGEhACBggDBhEUBCAAEUEHIAIIElESXQUgAQISXQQAABJxBQABARJ1BAAAEhADAAABBCgA
EUEECAAScQQIABJ1BAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MB
CAEAAgAAAAAAKAEAI1NUXzBlMWM5MjdjZTM5ZjQzM2U5NGU3NzcwZmNiYmEyYzA1AAAFAQAAAAAW
AQARQ29weXJpZ2h0IEAgIDIwMTYAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4U
RnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41AAC0AAAAzsrvvgEAAACRAAAA
bFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4w
LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0
ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAVEMA
AAAAAAAAAAAAbkMAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBDAAAAAAAAAAAAAAAAX0NvckRs
bE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
wgMAAAAAAAAAAAAAwgM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAPZjwRwAAAEA9mPBHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BCIDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAP4CAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8A
MABlADEAYwA5ADIANwBjAGUAMwA5AGYANAAzADMAZQA5ADQAZQA3ADcANwAwAGYAYwBiAGIAYQAy
AGMAMAA1AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMwA2ADEA
LgAyADUANQA5ADAAAAAAAEQAEgABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBjAHIAQwBh
AGwAbABXAGkAbgBTAGMAcAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcA
aAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA2AAAAKgABAAEATABlAGcAYQBs
AFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAABMABIAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwA
ZQBuAGEAbQBlAAAAUwBjAHIAQwBhAGwAbABXAGkAbgBTAGMAcAAuAGQAbABsAAAAaAAkAAEAUABy
AG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwAwAGUAMQBjADkAMgA3AGMAZQAzADkAZgA0ADMA
MwBlADkANABlADcANwA3ADAAZgBjAGIAYgBhADIAYwAwADUAAABCAA8AAQBQAHIAbwBkAHUAYwB0
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA2ADEALgAyADUANQA5ADAAAAAAAEYADwABAEEA
cwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA2ADEALgAyADUANQA5
ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAIAzAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\PostDownloadSuccessMailByCustomer"
          DTS:CreationName="Microsoft.SendMailTask"
          DTS:Description="Send Mail Task"
          DTS:Disabled="True"
          DTS:DTSID="{9CA562D2-1733-42B8-B1F5-7E0CBFB9B825}"
          DTS:ExecutableType="Microsoft.SendMailTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="PostDownloadSuccessMailByCustomer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="MessageSource">@[User::EmailBody]="Downloaded Image of Customer -" +  @[User::CustSC] + " Dated - "+  RIGHT("0" + (DT_STR, 2, 1252) DATEPART("dd" , @[User::ProcessDT] ), 2) + "-" + RIGHT("0" + (DT_STR, 2, 1252) DATEPART("mm" , @[User::ProcessDT]), 2) + "-" +  (DT_STR, 4, 1252) DATEPART("yy" , @[User::ProcessDT])</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="Subject">"Image Download Confirmation of Customer-" +  @[User::CustSC]</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{5C933721-9323-4A81-8215-D974302F9E3E}"
              SendMailTask:From="info@creativeclippingpath.com"
              SendMailTask:To="s.ullah@creativeclippingpath.com"
              SendMailTask:Subject="Image Download Confirmation of Customer-"
              SendMailTask:MessageSource="Downloaded Image of Customer - Dated - 24-02-2020" xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{7CB9217D-7DDF-4105-A64E-CD62D2414C5E}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="UploadFTPFolderListsToDBByCustomer"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_4ab634a12f29442da3af46ed15b7fd1d"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::vFolderLists"
              ReadWriteVariables="User::vFoldersListsforDL">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_4ab634a12f29442da3af46ed15b7fd1d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_4ab634a12f29442da3af46ed15b7fd1d")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="ST_4ab634a12f29442da3af46ed15b7fd1d.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{88FBD480-5258-4643-9302-089EC24525D0}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_4ab634a12f29442da3af46ed15b7fd1d</RootNamespace>
    <AssemblyName>FTPFolderstoDB</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
#endregion

namespace FTPFolderstoDB
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
    
            ConnectionManager cm;
            SqlConnection sqlConn;

            try
            {
                cm = Dts.Connections["CCPL"];
                sqlConn = (SqlConnection)cm.AcquireConnection(Dts.Transaction);


                DataTable dtFolders = (DataTable)Dts.Variables["User::vFolderLists"].Value;


                if (dtFolders.Rows.Count > 0)
                {

                    using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConn))
                    {
                        //Set the database table name
                        sqlBulkCopy.DestinationTableName = "[IES_FTPDirectoryByCustomer]";

                        ////[OPTIONAL]: Map the DataTable columns with that of the database table
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[1].ColumnName, "DirPath");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[3].ColumnName, "Cust_Code");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[4].ColumnName, "Process_date");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[5].ColumnName, "LocalDirPath");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns[6].ColumnName, "NoOfFiles");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns["ProcessingHour"].ColumnName, "ProcessingHour");
                        sqlBulkCopy.ColumnMappings.Add(dtFolders.Columns["ProcessingTime"].ColumnName, "ProcessingTime");


                        sqlBulkCopy.WriteToServer(dtFolders);
                        sqlConn.Close();
                    }

                    Dts.Variables["vFoldersListsforDL"].Value = dtFolders;

                }                               

                cm.ReleaseConnection(sqlConn);

            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, null,
                        string.Format("Error when Uploading Remote Folders to Database: {0}", e), null, 0);
                Dts.TaskResult = (int)DTSExecResult.Failure;
                throw;
            }
            

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_4ab634a12f29442da3af46ed15b7fd1d</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_4ab634a12f29442da3af46ed15b7fd1d</msb:DisplayName>
    <msb:ProjectId>{9A86E3D2-F5C8-46B9-8207-1E2E5C48FC1A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_4ab634a12f29442da3af46ed15b7fd1d.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Settings.get_Default():ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Sett" +
    "ings")]

namespace ST_4ab634a12f29442da3af46ed15b7fd1d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_4ab634a12f29442da3af46ed15b7fd1d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_4ab634a12f29442da3af46ed15b7fd1d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="FTPFolderstoDB.dll">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
VoD5AOUAUCAAAAAAhgAyBAYAAQB0IgAAAACGGJIFBgABAHwiAAAAAIMYkgUGAAEAhCIAAAAAkwhA
BekAAQCwIgAAAACTCAEB7gABALciAAAAAJMIDQHzAAEAvyIAAAAAlgjqBvkAAgDGIgAAAACGGJIF
BgACAM4iAAAAAJEYmAX+AAIAAAABAEgDCQCSBQEAEQCSBQYAGQCSBQoAKQCSBRAAMQCSBRAAOQCS
BRAAQQCSBRAASQCSBRAAUQCSBRAAWQCSBRAAYQCSBRAAaQCSBQYAqQCSBQYA0QCSBRUA4QCSBQYA
cQCyBigA6QCaBi0A8QALBDIA6QBsBDgAeQDlBDwA6QBkBkEA+QALBEYAAQE0AzgAiQDTBk0AEQEb
B1MAkQCSBVcAkQCsABAAkQByBl0AiQCOBmMAIQELBGkAKQHFAHAAGQFVAHQAIQELBHwAkQB6BYMA
OQF4AQYAQQF+AQYAAQE+A4kAeQD3BIkA6QDIBo4AUQHcBpQASQGIBZoA6QD2BgEAcQCSBQYAsQCS
BQYAWQGaAKMAWQElB6wAuQCSBbIA2QCSBQYACAAUAMwACAAYANEAKQBzADkBLgALABEBLgATABoB
LgAbADkBLgAjAEIBLgArAGsBLgAzAGsBLgA7AGsBLgBDAEIBLgBLAHEBLgBTAGsBLgBbAIgBQwBj
ANEASQBzADkBYQB7ANEAYwBrANEAGwADAAEABAADAAAARAUCAQAAIQEHAQAA7gYMAQIABAADAAIA
BQAFAAEABgAFAAIABwAHAASAAAABAAAAsxxpXAAAAAAAAAoAAAAEAAAAAAAAAAAAAAC6AEwAAAAA
AA4AAAAAAAAAAAAAAMMAiAMAAAAADgAAAAAAAAAAAAAAwwAZAAAAAAAEAAAAAAAAAAAAAAC6AEAA
AAAAAAQAAAAAAAAAAAAAALoAFAQAAAAAAAAAAAEAAADjBQAABQACAAAAAAAAPE1vZHVsZT4ARlRQ
Rm9sZGVyc3RvREIATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVt
LkRhdGEAbXNjb3JsaWIAQWRkAGRlZmF1bHRJbnN0YW5jZQBEYXRhVGFibGUAVmFyaWFibGUASURp
c3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAc2V0X0Rlc3RpbmF0
aW9uVGFibGVOYW1lAGdldF9Db2x1bW5OYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRp
bWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZwBTdHJpbmcATWljcm9zb2Z0LlNxbFNlcnZlci5T
Y3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0
T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEZUUEZvbGRlcnN0b0RCLmRsbABnZXRf
SXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU3lzdGVt
LkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X1RyYW5zYWN0aW9uAFN5c3Rl
bS5SZWZsZWN0aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24ARGF0YUNvbHVt
bkNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24ARGJDb25uZWN0aW9uAEFjcXVpcmVDb25uZWN0
aW9uAFJlbGVhc2VDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRh
LkNvbW1vbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2Vy
AEV2ZW50c09iamVjdFdyYXBwZXIAV3JpdGVUb1NlcnZlcgBGaXJlRXJyb3IALmN0b3IALmNjdG9y
AFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3Rl
bS5SZXNvdXJjZXMAU1RfNGFiNjM0YTEyZjI5NDQyZGEzYWY0NmVkMTViN2ZkMWQuUHJvcGVydGll
cy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzRhYjYzNGExMmYyOTQ0MmRh
M2FmNDZlZDE1YjdmZDFkLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBnZXRfQ29sdW1uTWFwcGlu
Z3MAU2V0dGluZ3MAZ2V0X0NvbHVtbnMAZ2V0X0Nvbm5lY3Rpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBT
Y3JpcHRSZXN1bHRzAGdldF9FdmVudHMAZ2V0X1Jvd3MARm9ybWF0AE9iamVjdABnZXRfRGVmYXVs
dABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAZ2V0X0NvdW50AGdldF9Bc3Nl
bWJseQBTcWxCdWxrQ29weQAAAAAJQwBDAFAATAAAJVUAcwBlAHIAOgA6AHYARgBvAGwAZABlAHIA
TABpAHMAdABzAAA5WwBJAEUAUwBfAEYAVABQAEQAaQByAGUAYwB0AG8AcgB5AEIAeQBDAHUAcwB0
AG8AbQBlAHIAXQAAD0QAaQByAFAAYQB0AGgAABNDAHUAcwB0AF8AQwBvAGQAZQAAGVAAcgBvAGMA
ZQBzAHMAXwBkAGEAdABlAAAZTABvAGMAYQBsAEQAaQByAFAAYQB0AGgAABNOAG8ATwBmAEYAaQBs
AGUAcwAAHVAAcgBvAGMAZQBzAHMAaQBuAGcASABvAHUAcgAAHVAAcgBvAGMAZQBzAHMAaQBuAGcA
VABpAG0AZQAAJXYARgBvAGwAZABlAHIAcwBMAGkAcwB0AHMAZgBvAHIARABMAABpRQByAHIAbwBy
ACAAdwBoAGUAbgAgAFUAcABsAG8AYQBkAGkAbgBnACAAUgBlAG0AbwB0AGUAIABGAG8AbABkAGUA
cgBzACAAdABvACAARABhAHQAYQBiAGEAcwBlADoAIAB7ADAAfQAAcVMAVABfADQAYQBiADYAMwA0
AGEAMQAyAGYAMgA5ADQANAAyAGQAYQAzAGEAZgA0ADYAZQBkADEANQBiADcAZgBkADEAZAAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAA8EzIWyTxHUuqgGWgI4y+
rwAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERZQwHBRI9EkESRRJJEk0EIAASdQQgABJ5BSABEj0c
AyAAHAQgARwcBCAAEn0GIAESgIEcBSAAEoCFAyAACAUgAQESQQUgABKAjQUgABKAkQYgARKAlQgD
IAAOByACEoCZDg4GIAESgJUOBSABARJFBCABARwFIAASgKUFAAIODhwIIAUCCA4ODggIAAESgK0R
gLEFIAASgLUHIAIBDhKAtQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJdAwYSYQMGEhAC
BggDBhEUBAAAEl0EAAASYQUAAQESYQQAABIQAwAAAQQIABJdBAgAEmEECAASEAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfNGFiNjM0YTEyZjI5
NDQyZGEzYWY0NmVkMTViN2ZkMWQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAASQEAGi5O
RVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZy
YW1ld29yayA0LjUAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJl
YWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNL
ZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNl
U2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAUNAAAAAAAAAAAAAAuNAAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAIDQAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQ
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAAMoDAAAAAAAAAAAAAMoDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQBpXLMcAAABAGlcsxw/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAQqAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAGAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfADQAYQBiADYAMwA0AGEAMQAyAGYAMgA5ADQANAAyAGQAYQAzAGEAZgA0ADYAZQBkADEA
NQBiADcAZgBkADEAZAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3
ADMANAA3AC4AMgAzADYANQA3AAAAAABGABMAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAEYA
VABQAEYAbwBsAGQAZQByAHMAdABvAEQAQgAuAGQAbABsAAAAAABIABIAAQBMAGUAZwBhAGwAQwBv
AHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADAAAAAqAAEA
AQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAE4AEwABAE8AcgBpAGcAaQBu
AGEAbABGAGkAbABlAG4AYQBtAGUAAABGAFQAUABGAG8AbABkAGUAcgBzAHQAbwBEAEIALgBkAGwA
bAAAAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA0AGEAYgA2ADMANABh
ADEAMgBmADIAOQA0ADQAMgBkAGEAMwBhAGYANAA2AGUAZAAxADUAYgA3AGYAZAAxAGQAAABCAA8A
AQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMwA0ADcALgAyADMANgA1
ADcAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcA
MwA0ADcALgAyADMANgA1ADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABANAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\LoopAllCustomers.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{27D7C3C9-01C3-42DA-957C-53172908D0AD}"
          DTS:From="Package\LoopAllCustomers\GetDirectoryListsFromFTPServerByCustomer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{1B72DD5C-726C-4E47-A029-ECD901279728}"
          DTS:From="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{1F7F7E12-B96B-42A0-811C-45AC0827733D}"
          DTS:From="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\LoopAllCustomers\PostDownloadSuccessMailByCustomer" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{E518E242-7E29-40CF-8444-6676F4AADE00}"
          DTS:ObjectName="{4F6AD5B8-17DD-4488-9CF5-329AC30A8AB2}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::CustomerID" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{3CB6B23D-0977-4494-817B-0A03CA0D7ABB}"
          DTS:ObjectName="{4DA6245E-D950-4506-8BD3-86F1DA49593B}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::CustSC" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{DC393D6D-2680-470A-959C-ACC0E85A4A95}"
          DTS:ObjectName="{3BFBC621-54D0-4373-98B1-FB3F247DBB1B}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::CustInputFolder" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{73EF2A36-7532-4E66-A5B3-644716F15F07}"
      DTS:From="Package\GetAllCustomersfromDB"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\LoopAllCustomers" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="192,41.6"
          Id="Package\GetAllCustomersfromDB"
          TopLeft="155.333327160941,25.6533335372074" />
        <NodeLayout
          Size="284.8,41.6"
          Id="Package\LoopAllCustomers\DownloadAllFilesByCustomerToLocalServer"
          TopLeft="56.933329545127,136.000001983642" />
        <NodeLayout
          Size="290.4,41.6"
          Id="Package\LoopAllCustomers\GetDirectoryListsFromFTPServerByCustomer"
          TopLeft="34.9000009536744,6.06000052897141" />
        <NodeLayout
          Size="261.6,41.6"
          Id="Package\LoopAllCustomers\PostDownloadSuccessMailByCustomer"
          TopLeft="72.7999814033515,196.586668578678" />
        <NodeLayout
          Size="265.6,41.6"
          Id="Package\LoopAllCustomers\UploadFTPFolderListsToDBByCustomer"
          TopLeft="50.9333297835457,68.7466681158279" />
        <EdgeLayout
          Id="Package\LoopAllCustomers.PrecedenceConstraints[Constraint]"
          TopLeft="34.9000009536744,26.8600005289714">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="16.0333288298713,62.6866675868564"
              Start="0,0"
              End="8.53332882987132,62.6866675868564">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,58.6866675868564" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,58.6866675868564"
                    Point2="-22.5,62.6866675868564"
                    Point3="-18.5,62.6866675868564" />
                  <mssgle:LineSegment
                    End="8.53332882987132,62.6866675868564" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 1]"
          TopLeft="183.733329783546,110.346668115828">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.5999997615813,25.6533338678145"
              Start="0,0"
              End="15.5999997615813,18.1533338678145">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,8.82666693390723" />
                  <mssgle:CubicBezierSegment
                    Point1="0,8.82666693390723"
                    Point2="0,12.8266669339072"
                    Point3="4,12.8266669339072" />
                  <mssgle:LineSegment
                    End="11.5999997615813,12.8266669339072" />
                  <mssgle:CubicBezierSegment
                    Point1="11.5999997615813,12.8266669339072"
                    Point2="15.5999997615813,12.8266669339072"
                    Point3="15.5999997615813,16.8266669339072" />
                  <mssgle:LineSegment
                    End="15.5999997615813,18.1533338678145" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\LoopAllCustomers.PrecedenceConstraints[Constraint 2]"
          TopLeft="56.933329545127,156.800001983642">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.8666518582244,60.5866665950353"
              Start="0,0"
              End="8.36665185822443,60.5866665950353">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,56.5866665950353" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,56.5866665950353"
                    Point2="-22.5,60.5866665950353"
                    Point3="-18.5,60.5866665950353" />
                  <mssgle:LineSegment
                    End="8.36665185822443,60.5866665950353" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="447.2,304"
          Size="447.2,347.2"
          Id="Package\LoopAllCustomers"
          TopLeft="395.333317624199,0.693333338843161" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="347.333327160941,46.4533335372074">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="47.999990463258,127.839999801636"
              Start="0,0"
              End="40.499990463258,127.839999801636">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.999995231629,0" />
                  <mssgle:CubicBezierSegment
                    Point1="19.999995231629,0"
                    Point2="23.999995231629,0"
                    Point3="23.999995231629,4" />
                  <mssgle:LineSegment
                    End="23.999995231629,123.839999801636" />
                  <mssgle:CubicBezierSegment
                    Point1="23.999995231629,123.839999801636"
                    Point2="23.999995231629,127.839999801636"
                    Point3="27.999995231629,127.839999801636" />
                  <mssgle:LineSegment
                    End="40.499990463258,127.839999801636" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>